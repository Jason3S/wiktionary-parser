/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function() {
    var o = function(k, v, o, l) {
            for (o = o || {}, l = k.length; l--; o[k[l]] = v);
            return o
        },
        $V0 = [1, 13],
        $V1 = [1, 14],
        $V2 = [1, 9],
        $V3 = [1, 16],
        $V4 = [1, 15],
        $V5 = [1, 10, 11, 12, 13, 14, 24, 50],
        $V6 = [1, 22],
        $V7 = [1, 30],
        $V8 = [1, 10, 11, 12, 13, 14, 15, 24, 27, 32, 48, 50],
        $V9 = [1, 10, 11, 12, 13, 14, 15, 24, 27, 32, 35, 36, 37, 38, 39, 40, 41, 43, 48, 50],
        $Va = [1, 39],
        $Vb = [15, 27, 32],
        $Vc = [14, 15, 24, 27, 32, 48, 50],
        $Vd = [1, 52],
        $Ve = [1, 53],
        $Vf = [1, 55],
        $Vg = [1, 56],
        $Vh = [1, 57],
        $Vi = [1, 58],
        $Vj = [14, 24, 27, 48, 50],
        $Vk = [2, 35],
        $Vl = [1, 68],
        $Vm = [1, 69],
        $Vn = [1, 70],
        $Vo = [1, 71],
        $Vp = [1, 72],
        $Vq = [1, 73],
        $Vr = [1, 74],
        $Vs = [27, 35, 36, 37, 38, 39, 40, 41, 43],
        $Vt = [2, 34],
        $Vu = [27, 35, 36, 37, 38, 41, 43],
        $Vv = [2, 33],
        $Vw = [27, 35, 36, 43],
        $Vx = [27, 35, 36, 37, 38, 43],
        $Vy = [27, 43];
    var parser = {
        trace: function trace() {},
        yy: {},
        symbols_: {
            "error": 2,
            "start": 3,
            "content": 4,
            "content-item": 5,
            "text": 6,
            "page-param": 7,
            "function": 8,
            "node": 9,
            "INCLUDE_ONLY": 10,
            "INCLUDE_ONLY_END": 11,
            "NO_INCLUDE": 12,
            "NO_INCLUDE_END": 13,
            "PARAM_START": 14,
            "PARAM_END": 15,
            "param2": 16,
            "param": 17,
            "param-wrapper": 18,
            "param-item": 19,
            "number": 20,
            "function-ifs": 21,
            "function-expr": 22,
            "template": 23,
            "{{": 24,
            "#if:": 25,
            "param3": 26,
            "}}": 27,
            "#ifeq:": 28,
            "param4": 29,
            "params": 30,
            "param1": 31,
            "|": 32,
            "#expr:": 33,
            "e": 34,
            "+": 35,
            "-": 36,
            "*": 37,
            "/": 38,
            "||": 39,
            "&&": 40,
            "^": 41,
            "(": 42,
            ")": 43,
            "TRUE": 44,
            "FALSE": 45,
            "E": 46,
            "PI": 47,
            "NUMBER": 48,
            "text-string": 49,
            "TEXT": 50,
            "$accept": 0,
            "$end": 1
        },
        terminals_: {
            2: "error",
            10: "INCLUDE_ONLY",
            11: "INCLUDE_ONLY_END",
            12: "NO_INCLUDE",
            13: "NO_INCLUDE_END",
            14: "PARAM_START",
            15: "PARAM_END",
            24: "{{",
            25: "#if:",
            27: "}}",
            28: "#ifeq:",
            32: "|",
            33: "#expr:",
            35: "+",
            36: "-",
            37: "*",
            38: "/",
            39: "||",
            40: "&&",
            41: "^",
            42: "(",
            43: ")",
            44: "TRUE",
            45: "FALSE",
            46: "E",
            47: "PI",
            48: "NUMBER",
            50: "TEXT"
        },
        productions_: [0, [3, 1],
            [3, 0],
            [4, 1],
            [4, 2],
            [5, 1],
            [5, 1],
            [5, 1],
            [5, 1],
            [9, 3],
            [9, 3],
            [7, 2],
            [7, 3],
            [17, 1],
            [18, 1],
            [18, 2],
            [19, 1],
            [19, 1],
            [19, 1],
            [19, 1],
            [8, 1],
            [8, 1],
            [8, 1],
            [21, 4],
            [21, 3],
            [21, 4],
            [21, 3],
            [23, 3],
            [23, 3],
            [30, 1],
            [30, 2],
            [29, 3],
            [29, 1],
            [26, 3],
            [26, 2],
            [26, 1],
            [16, 3],
            [16, 2],
            [16, 2],
            [16, 1],
            [16, 1],
            [31, 1],
            [22, 4],
            [34, 3],
            [34, 3],
            [34, 3],
            [34, 3],
            [34, 3],
            [34, 3],
            [34, 3],
            [34, 2],
            [34, 3],
            [34, 1],
            [34, 1],
            [34, 1],
            [34, 1],
            [34, 1],
            [34, 1],
            [20, 1],
            [6, 1],
            [49, 1],
            [49, 2]
        ],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */ , $$ /* vstack */ , _$ /* lstack */ ) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return $$[$0];
                    break;
                case 2:
                    return leaf(null);
                    break;
                case 3:
                    this.$ = content($$[$0]);
                    break;
                case 4:
                case 15:
                    this.$ = content($$[$0 - 1], $$[$0]);
                    break;
                case 9:
                    this.$ = node('includeonly', [$$[$0 - 1]]);
                    break;
                case 10:
                    this.$ = node('noinclude', [$$[$0 - 1]]);
                    break;
                case 11:
                    this.$ = node('pageParam', [missingParam(null)]);
                    break;
                case 12:
                    this.$ = node('pageParam', $$[$0 - 1]);
                    break;
                case 13:
                    this.$ = trimParam($$[$0]);
                    break;
                case 14:
                    this.$ = $$[$0]
                    break;
                case 23:
                    this.$ = node('if', $$[$0 - 1]);
                    break;
                case 24:
                    this.$ = node('if', [].fill(missingParam(), 0, 3));
                    break;
                case 25:
                    this.$ = node('ifeq', $$[$0 - 1]);
                    break;
                case 26:
                    this.$ = node('ifeq', [].fill(missingParam(), 0, 4));
                    break;
                case 27:
                    this.$ = node('template', $$[$0 - 1]);
                    break;
                case 28:
                    this.$ = node('template', []);
                    break;
                case 29:
                case 60:
                    this.$ = $$[$0];
                    break;
                case 30:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 31:
                case 33:
                case 36:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 32:
                case 35:
                case 40:
                    this.$ = $$[$0].concat([missingParam()]);
                    break;
                case 34:
                case 37:
                    this.$ = $$[$0 - 1].concat([leaf()]);
                    break;
                case 38:
                    this.$ = [leaf()].concat($$[$0]);
                    break;
                case 39:
                    this.$ = [leaf(), leaf()];
                    break;
                case 41:
                    this.$ = [$$[$0]];
                    break;
                case 42:
                    this.$ = $$[$0 - 1];
                    break;
                case 43:
                    this.$ = node('+', [$$[$0 - 2], $$[$0]]);
                    break;
                case 44:
                    this.$ = node('-', [$$[$0 - 2], $$[$0]]);
                    break;
                case 45:
                    this.$ = node('*', [$$[$0 - 2], $$[$0]]);
                    break;
                case 46:
                    this.$ = node('/', [$$[$0 - 2], $$[$0]]);
                    break;
                case 47:
                    this.$ = node('||', [$$[$0 - 2], $$[$0]]);
                    break;
                case 48:
                    this.$ = node('&&', [$$[$0 - 2], $$[$0]]);
                    break;
                case 49:
                    this.$ = node('pow', [$$[$0 - 2], $$[$0]]);
                    break;
                case 50:
                    this.$ = node('-', [leaf(0), $$[$0]]);
                    break;
                case 51:
                    this.$ = $$[$0 - 1];
                    break;
                case 52:
                case 57:
                    this.$ = $$[$0];
                    break;
                case 53:
                    this.$ = leaf(true);
                    break;
                case 54:
                    this.$ = leaf(false);
                    break;
                case 55:
                    this.$ = leaf(Math.E);
                    break;
                case 56:
                    this.$ = leaf(Math.PI);
                    break;
                case 58:
                    this.$ = leaf(Number(yytext));
                    break;
                case 59:
                    this.$ = leaf($$[$0]);
                    break;
                case 61:
                    this.$ = $$[$0 - 1] + $$[$0];
                    break;
            }
        },
        table: [{
            1: [2, 2],
            3: 1,
            4: 2,
            5: 3,
            6: 4,
            7: 5,
            8: 6,
            9: 7,
            10: $V0,
            12: $V1,
            14: $V2,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            49: 8,
            50: $V4
        }, {
            1: [3]
        }, {
            1: [2, 1],
            5: 17,
            6: 4,
            7: 5,
            8: 6,
            9: 7,
            10: $V0,
            12: $V1,
            14: $V2,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            49: 8,
            50: $V4
        }, o($V5, [2, 3]), o($V5, [2, 5]), o($V5, [2, 6]), o($V5, [2, 7]), o($V5, [2, 8]), o([1, 10, 11, 12, 13, 14, 15, 24, 27, 32, 48], [2, 59], {
            50: [1, 18]
        }), {
            6: 26,
            7: 29,
            8: 28,
            14: $V2,
            15: [1, 19],
            16: 20,
            17: 23,
            18: 24,
            19: 25,
            20: 27,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            31: 21,
            32: $V6,
            48: $V7,
            49: 8,
            50: $V4
        }, o($V8, [2, 20]), o($V8, [2, 21]), o($V8, [2, 22]), {
            4: 31,
            5: 3,
            6: 4,
            7: 5,
            8: 6,
            9: 7,
            10: $V0,
            12: $V1,
            14: $V2,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            49: 8,
            50: $V4
        }, {
            4: 32,
            5: 3,
            6: 4,
            7: 5,
            8: 6,
            9: 7,
            10: $V0,
            12: $V1,
            14: $V2,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            49: 8,
            50: $V4
        }, o($V8, [2, 60]), {
            6: 26,
            7: 29,
            8: 28,
            14: $V2,
            17: 23,
            18: 24,
            19: 25,
            20: 27,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            25: [1, 33],
            28: [1, 34],
            30: 36,
            31: 37,
            33: [1, 35],
            48: $V7,
            49: 8,
            50: $V4
        }, o($V5, [2, 4]), o($V8, [2, 61]), o($V9, [2, 11]), {
            15: [1, 38]
        }, o([15, 27], [2, 40], {
            32: $Va
        }), o($Vb, [2, 39], {
            49: 8,
            21: 10,
            22: 11,
            23: 12,
            17: 23,
            18: 24,
            19: 25,
            6: 26,
            20: 27,
            8: 28,
            7: 29,
            31: 40,
            14: $V2,
            24: $V3,
            48: $V7,
            50: $V4
        }), o($Vc, [2, 41]), o($Vb, [2, 13], {
            49: 8,
            21: 10,
            22: 11,
            23: 12,
            6: 26,
            20: 27,
            8: 28,
            7: 29,
            19: 41,
            14: $V2,
            24: $V3,
            48: $V7,
            50: $V4
        }), o($Vc, [2, 14]), o($Vc, [2, 16]), o($Vc, [2, 17]), o($Vc, [2, 18]), o($Vc, [2, 19]), o([14, 15, 24, 27, 32, 35, 36, 37, 38, 39, 40, 41, 43, 48, 50], [2, 58]), {
            5: 17,
            6: 4,
            7: 5,
            8: 6,
            9: 7,
            10: $V0,
            11: [1, 42],
            12: $V1,
            14: $V2,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            49: 8,
            50: $V4
        }, {
            5: 17,
            6: 4,
            7: 5,
            8: 6,
            9: 7,
            10: $V0,
            12: $V1,
            13: [1, 43],
            14: $V2,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            49: 8,
            50: $V4
        }, {
            6: 26,
            7: 29,
            8: 28,
            14: $V2,
            16: 46,
            17: 23,
            18: 24,
            19: 25,
            20: 27,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            26: 44,
            27: [1, 45],
            31: 21,
            32: $V6,
            48: $V7,
            49: 8,
            50: $V4
        }, {
            6: 26,
            7: 29,
            8: 28,
            14: $V2,
            16: 49,
            17: 23,
            18: 24,
            19: 25,
            20: 27,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            26: 50,
            27: [1, 48],
            29: 47,
            31: 21,
            32: $V6,
            48: $V7,
            49: 8,
            50: $V4
        }, {
            7: 59,
            14: $V2,
            20: 54,
            34: 51,
            36: $Vd,
            42: $Ve,
            44: $Vf,
            45: $Vg,
            46: $Vh,
            47: $Vi,
            48: $V7
        }, {
            6: 26,
            7: 29,
            8: 28,
            14: $V2,
            17: 23,
            18: 24,
            19: 25,
            20: 27,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            27: [1, 60],
            31: 61,
            48: $V7,
            49: 8,
            50: $V4
        }, o($Vj, [2, 29]), o($V9, [2, 12]), o($Vb, [2, 37], {
            49: 8,
            21: 10,
            22: 11,
            23: 12,
            17: 23,
            18: 24,
            19: 25,
            6: 26,
            20: 27,
            8: 28,
            7: 29,
            31: 62,
            14: $V2,
            24: $V3,
            48: $V7,
            50: $V4
        }), o($Vb, [2, 38]), o($Vc, [2, 15]), o($V5, [2, 9]), o($V5, [2, 10]), {
            27: [1, 63]
        }, o($V8, [2, 24]), {
            27: $Vk,
            32: [1, 64]
        }, {
            27: [1, 65]
        }, o($V8, [2, 26]), {
            27: $Vk,
            32: [1, 66]
        }, {
            27: [2, 32]
        }, {
            27: [1, 67],
            35: $Vl,
            36: $Vm,
            37: $Vn,
            38: $Vo,
            39: $Vp,
            40: $Vq,
            41: $Vr
        }, {
            7: 59,
            14: $V2,
            20: 54,
            34: 75,
            36: $Vd,
            42: $Ve,
            44: $Vf,
            45: $Vg,
            46: $Vh,
            47: $Vi,
            48: $V7
        }, {
            7: 59,
            14: $V2,
            20: 54,
            34: 76,
            36: $Vd,
            42: $Ve,
            44: $Vf,
            45: $Vg,
            46: $Vh,
            47: $Vi,
            48: $V7
        }, o($Vs, [2, 52]), o($Vs, [2, 53]), o($Vs, [2, 54]), o($Vs, [2, 55]), o($Vs, [2, 56]), o($Vs, [2, 57]), o($V8, [2, 27]), o($Vj, [2, 30]), o($Vb, [2, 36]), o($V8, [2, 23]), {
            6: 26,
            7: 29,
            8: 28,
            14: $V2,
            17: 23,
            18: 24,
            19: 25,
            20: 27,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            27: $Vt,
            31: 77,
            48: $V7,
            49: 8,
            50: $V4
        }, o($V8, [2, 25]), {
            6: 26,
            7: 29,
            8: 28,
            14: $V2,
            16: 78,
            17: 23,
            18: 24,
            19: 25,
            20: 27,
            21: 10,
            22: 11,
            23: 12,
            24: $V3,
            27: $Vt,
            31: 79,
            32: $V6,
            48: $V7,
            49: 8,
            50: $V4
        }, o($V8, [2, 42]), {
            7: 59,
            14: $V2,
            20: 54,
            34: 80,
            36: $Vd,
            42: $Ve,
            44: $Vf,
            45: $Vg,
            46: $Vh,
            47: $Vi,
            48: $V7
        }, {
            7: 59,
            14: $V2,
            20: 54,
            34: 81,
            36: $Vd,
            42: $Ve,
            44: $Vf,
            45: $Vg,
            46: $Vh,
            47: $Vi,
            48: $V7
        }, {
            7: 59,
            14: $V2,
            20: 54,
            34: 82,
            36: $Vd,
            42: $Ve,
            44: $Vf,
            45: $Vg,
            46: $Vh,
            47: $Vi,
            48: $V7
        }, {
            7: 59,
            14: $V2,
            20: 54,
            34: 83,
            36: $Vd,
            42: $Ve,
            44: $Vf,
            45: $Vg,
            46: $Vh,
            47: $Vi,
            48: $V7
        }, {
            7: 59,
            14: $V2,
            20: 54,
            34: 84,
            36: $Vd,
            42: $Ve,
            44: $Vf,
            45: $Vg,
            46: $Vh,
            47: $Vi,
            48: $V7
        }, {
            7: 59,
            14: $V2,
            20: 54,
            34: 85,
            36: $Vd,
            42: $Ve,
            44: $Vf,
            45: $Vg,
            46: $Vh,
            47: $Vi,
            48: $V7
        }, {
            7: 59,
            14: $V2,
            20: 54,
            34: 86,
            36: $Vd,
            42: $Ve,
            44: $Vf,
            45: $Vg,
            46: $Vh,
            47: $Vi,
            48: $V7
        }, o($Vu, [2, 50], {
            39: $Vp,
            40: $Vq
        }), {
            35: $Vl,
            36: $Vm,
            37: $Vn,
            38: $Vo,
            39: $Vp,
            40: $Vq,
            41: $Vr,
            43: [1, 87]
        }, {
            27: $Vv
        }, {
            27: [2, 31]
        }, {
            27: $Vv,
            32: $Va
        }, o($Vw, [2, 43], {
            37: $Vn,
            38: $Vo,
            39: $Vp,
            40: $Vq,
            41: $Vr
        }), o($Vw, [2, 44], {
            37: $Vn,
            38: $Vo,
            39: $Vp,
            40: $Vq,
            41: $Vr
        }), o($Vx, [2, 45], {
            39: $Vp,
            40: $Vq,
            41: $Vr
        }), o($Vx, [2, 46], {
            39: $Vp,
            40: $Vq,
            41: $Vr
        }), o($Vy, [2, 47], {
            35: $Vl,
            36: $Vm,
            37: $Vn,
            38: $Vo,
            39: $Vp,
            40: $Vq,
            41: $Vr
        }), o($Vy, [2, 48], {
            35: $Vl,
            36: $Vm,
            37: $Vn,
            38: $Vo,
            39: $Vp,
            40: $Vq,
            41: $Vr
        }), o($Vu, [2, 49], {
            39: $Vp,
            40: $Vq
        }), o($Vs, [2, 51])],
        defaultActions: {
            50: [2, 32],
            77: [2, 33],
            78: [2, 31]
        },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                }
                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = {
                yy: {}
            };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }

            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack:
                var lex = function() {
                    var token;
                    token = lexer.lex() || EOF;
                    if (typeof token !== 'number') {
                        token = self.symbols_[token] || token;
                    }
                    return token;
                };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {},
                p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            sharedState.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };

    // First Block of code.


    var _ = require('lodash');

    var CONTENT = 'content';

    function leaf(v) {
        v = (typeof v === "undefined") ? null : v;
        return {
            v: v
        };
    }

    function missingParam() {
        return {
            v: undefined
        };
    }

    function node(t, c) {
        return {
            t: t,
            c: c
        };
    }

    function addChild(node, c) {
        node.c.push(c);
        return node;
    }

    function append(a, b) {
        a.c.concat([b]);
        return a;
    }

    function content(a, b) {
        if (!b) {
            if (a.t === CONTENT) {
                return a;
            }
            return node(CONTENT, [a]);
        }
        if (a.t === CONTENT) {
            if (b.t === CONTENT) {
                a.c.concat(b.c);
            } else {
                a.c.concat([b]);
            }
            return a;
        } else if (b.t === CONTENT) {
            return node(CONTENT, [a].concat(b.c));
        }

        return node(CONTENT, [a, b]);
    }


    function trimParamLeft(ast) {
        "use strict";

        var c, len, i;

        if (ast == null) {
            return ast;
        }

        if (typeof ast.v === "string") {
            ast.v = ast.v.trimLeft();

            if (ast.v === '') {
                return null;
            }

            return ast;
        }

        c = ast.c;
        if (!c || !c.length) {
            return null;
        }

        if (ast.t !== CONTENT) {
            return ast;
        }

        len = c.length;

        for (i = 0; i < len; ++i) {
            c[i] = trimParamLeft(c[i]);
            if (c[i] !== null) break;
        }

        if (i >= len) {
            return null;
        }

        ast.c = c.slice(i);

        if (ast.c.length == 1) {
            return ast.c[0];
        }

        return ast;
    }


    function trimParamRight(ast) {
        "use strict";

        var c, len, i;

        if (ast == null) {
            return ast;
        }

        if (typeof ast.v === "string") {
            ast.v = ast.v.trimRight();

            if (ast.v === '') {
                return null;
            }

            return ast;
        }

        c = ast.c;
        if (!c || !c.length) {
            return null;
        }

        if (ast.t !== CONTENT) {
            return ast;
        }

        len = c.length;

        for (i = len - 1; i >= 0; --i) {
            c[i] = trimParamRight(c[i]);
            if (c[i] !== null) break;
        }

        if (i < 0) {
            return null;
        }

        ast.c = c.slice(0, i + 1);

        if (ast.c.length == 1) {
            return ast.c[0];
        }

        return ast;
    }

    function trimParam(ast) {
        ast = trimParamRight(trimParamLeft(ast));
        if (ast == null) {
            return leaf(null);
        }
        return ast;
    }

    function processWikiTemplate(page, params, ast, transclusion) {
        "use strict";

        var INCLUDE_MODE = 'include';

        transclusion = transclusion || INCLUDE_MODE;
        var isIncludeOnly = transclusion === INCLUDE_MODE;
        var isNoInclude = transclusion !== INCLUDE_MODE;
        var pageParams = normalizeParams(params);
        var pageName = normalizePageName(page);

        var functions = {
            pageParam: getPageParam,
            "+": function(a, b) {
                return a + b;
            },
            "-": function(a, b) {
                return a - b;
            },
            "*": function(a, b) {
                return a * b;
            },
            "/": function(a, b) {
                return a / b;
            },
            "||": function(a, b) {
                return a || b;
            },
            "&&": function(a, b) {
                return a && b;
            },
            "if": function(a, b, c) {
                return a ? b : c;
            },
            "ifeq": function(a, b, c, d) {
                return (a == b) ? c : d;
            },
            pow: Math.pow,
            includeonly: function(content) {
                return isIncludeOnly ? content : '';
            },
            noinclude: function(content) {
                return isNoInclude ? content : '';
            },
            "content": function() {
                return arguments.length == 1 ? arguments[0] : Array.from(arguments).join('');
            }
        };

        function processAst(ast) {
            var i;
            var v = ast.v;
            var c = ast.c;
            var p = [];
            if (v !== undefined || c === undefined) {
                return v;
            }

            for (i = 0; i < c.length; i += 1) {
                p[i] = processAst(c[i]);
            }
            var fn = functions[ast.t];
            if (fn === undefined) {
                console.log("Unknown function: '" + ast.t + "'");
                return undefined;
            }
            return fn.apply(this, p);
        }

        function normalizeParams(pageParams) {
            var params = [undefined];
            var namedParamRegEx = /^([a-zA-Z0-9]+)[=](.*)$/;
            for (var i in pageParams) {
                if (pageParams.hasOwnProperty(i)) {
                    var p = '' + pageParams[i];
                    var m = p.match(namedParamRegEx);
                    if (m) {
                        params[m[1]] = m[2];
                    } else {
                        params.push(p);
                    }
                }
            }

            return params;
        }

        function normalizePageName(pageName) {
            return pageName.replace(/^[^:]+[:]/, '');
        }

        function getPageParam(name, alternate) {
            name = ('' + name).trim();

            if (alternate === null) {
                alternate = pageName;
            }
            if (alternate === undefined) {
                alternate = '{{{' + name + '}}}';
            }
            var p = pageParams[name];
            if (p === undefined) {
                return alternate;
            }
            return p;
        }

        return processAst(ast);
    }

    parser.processWikiTemplate = processWikiTemplate;

    /* generated by jison-lex 0.3.4 */
    var lexer = (function() {
        var lexer = ({

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });

                }
                return this;
            },

            // retain first n characters of the match
            less: function(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function(match, indexed_rule) {
                var token,
                    lines,
                    backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token,
                    match,
                    tempMatch,
                    index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: {},
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        this.begin('param');
                        return 14;
                        break;
                    case 1:
                        this.begin('param');
                        return 14;
                        break;
                    case 2:
                        this.begin('param');
                        return 14;
                        break;
                    case 3:
                        this.popState();
                        return 15;
                        break;
                    case 4:
                        return 32;
                        break;
                    case 5:
                        return 50;
                        break;
                    case 6:
                        this.begin('template');
                        return 24;
                        break;
                    case 7:
                        this.begin('template');
                        return 24;
                        break;
                    case 8:
                        this.popState();
                        return 27;
                        break;
                    case 9:
                        return 25;
                        break;
                    case 10:
                        return 28;
                        break;
                    case 11:
                        this.begin('expr');
                        return 33;
                        break;
                    case 12:
                        return 32;
                        break;
                    case 13:
                        return 48;
                        break;
                    case 14:
                        return 50;
                        break;
                    case 15:
                        this.begin('param');
                        return 14;
                        break;
                    case 16:
                        this.begin('template');
                        return 24;
                        break;
                    case 17:
                        return 48;
                        break;
                    case 18:
                        return "TRUE";
                        break;
                    case 19:
                        return "FALSE";
                        break;
                    case 20:
                        return 40;
                        break;
                    case 21:
                        return 39;
                        break;
                    case 22:
                        return '=';
                        break;
                    case 23:
                        return 42;
                        break;
                    case 24:
                        return 43;
                        break;
                    case 25:
                        return 35;
                        break;
                    case 26:
                        return 36;
                        break;
                    case 27:
                        return 37;
                        break;
                    case 28:
                        return 38;
                        break;
                    case 29:
                        return 41;
                        break;
                    case 30:
                        return 47;
                        break;
                    case 31:
                        return 46;
                        break;
                    case 32:
                        this.popState();
                        return 27;
                        break;
                    case 33:
                        /* ignore space in expressions */
                        break;
                    case 34:
                        return 10;
                        break;
                    case 35:
                        return 11;
                        break;
                    case 36:
                        return 12;
                        break;
                    case 37:
                        return 13;
                        break;
                    case 38:
                        return 50;
                        break;
                }
            },
            rules: [/^(?:\{\{\{)/, /^(?:\{\{\{)/, /^(?:\{\{\{)/, /^(?:\}\}\})/, /^(?:\|)/, /^(?:.)/, /^(?:\{\{)/, /^(?:\{\{)/, /^(?:\}\})/, /^(?:\s*#if:)/, /^(?:\s*#ifeq:)/, /^(?:\s*#expr:)/, /^(?:\|)/, /^(?:[0-9]+([.][0-9]+)?)/, /^(?:(.|\n))/, /^(?:\{\{\{)/, /^(?:\{\{)/, /^(?:[0-9]+([.][0-9]+)?)/, /^(?:true\b)/, /^(?:false\b)/, /^(?:and\b)/, /^(?:or\b)/, /^(?:=)/, /^(?:\()/, /^(?:\))/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:\^)/, /^(?:pi\b)/, /^(?:e\b)/, /^(?:\}\})/, /^(?:\s+)/, /^(?:<includeonly>)/, /^(?:<\/includeonly>)/, /^(?:<noinclude>)/, /^(?:<\/noinclude>)/, /^(?:(.|\n))/],
            conditions: {
                "param": {
                    "rules": [1, 3, 4, 5],
                    "inclusive": false
                },
                "template": {
                    "rules": [2, 7, 8, 9, 10, 11, 12, 13, 14],
                    "inclusive": false
                },
                "expr": {
                    "rules": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33],
                    "inclusive": false
                },
                "INITIAL": {
                    "rules": [0, 6, 34, 35, 36, 37, 38],
                    "inclusive": true
                }
            }
        });
        /* Begin Lexer Customization Methods */
        (function() {
            var _originalLexMethod = lexer.lex;
            var _originalParserMethod = parser.parse;
            var _tokenCache = [];
            var _debug = true;
            var tokenMap = [];

            var _params = {};
            var _pageName = 'Unknown';

            function log() {
                if (_debug) {
                    console.log.apply(console, arguments);
                }
            }

            function getTokenText(token) {
                if (Number.isInteger(token)) {
                    return tokenMap[token] || ('Token Not Found: ' + token);
                }
                return token;
            }

            lexer.lex = function() {
                var token = _tokenCache.shift();
                if (token) {
                    log(getTokenText(token));
                    return token;
                }
                token = _originalLexMethod.call(this);
                if (Array.isArray(token)) {
                    _tokenCache = token;
                    return this.lex();
                }
                log(getTokenText(token));
                return token;
            };


            function setupTokenMap() {
                var symbols = parser.symbols_;
                for (token in symbols) {
                    if (symbols.hasOwnProperty(token)) {
                        tokenMap[symbols[token]] = token;
                    }
                }
            }

            setupTokenMap();
            // parser.processWikiTemplate = processWikiTemplate;
        }());

        /* End Lexer Customization Methods */
        ;
        return lexer;
    })();
    parser.lexer = lexer;

    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function() {
        return parser.parse.apply(parser, arguments);
    };
    exports.main = function() {};
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}