/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var wiktionary = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,26],$V2=[1,27],$V3=[1,28],$V4=[1,29],$V5=[1,54],$V6=[1,55],$V7=[1,51],$V8=[1,52],$V9=[1,50],$Va=[1,49],$Vb=[1,33],$Vc=[1,40],$Vd=[1,41],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[1,24],$Vi=[1,5],$Vj=[53,54,64,66,68,69,73,74,81,87,90,92,94,98],$Vk=[18,24,28,32,36,53,54,64,66,68,69,73,74,81,87,90,92,94,98],$Vl=[18,98],$Vm=[18,24,98],$Vn=[18,24,28,98],$Vo=[18,24,28,32,98],$Vp=[18,24,28,32,36,98],$Vq=[1,92],$Vr=[18,24,28,32,36,73,87,90,92,94,98],$Vs=[1,105],$Vt=[18,24,28,32,36,53,54,64,66,68,69,71,73,74,81,87,89,90,91,92,93,94,95,97,98],$Vu=[18,24,28,32,36,53,54,64,66,68,69,71,73,74,76,78,81,87,89,90,91,92,93,94,95,97,98],$Vv=[18,20,24,28,32,36,53,54,64,66,68,69,71,73,74,76,78,81,83,85,87,89,90,91,92,93,94,95,97,98],$Vw=[1,124],$Vx=[1,129],$Vy=[1,130],$Vz=[18,20,24,28,32,36,53,54,64,66,68,69,70,71,73,74,76,78,81,83,85,87,89,90,91,92,93,94,95,97,98],$VA=[89,91,93,95,97],$VB=[18,24,28,32,36,53,54,64,66,68,69,73,74,81,87,89,90,91,92,93,94,95,97,98],$VC=[76,78],$VD=[83,85],$VE=[53,54,64,66,68,69,74,81],$VF=[53,54,64,66,69,74,81],$VG=[1,181],$VH=[1,182],$VI=[53,54,64,66,68,69,71,73,74,76,78,81];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"wiki-page":3,"article":4,"end-of-file":5,"article-content":6,"sections":7,"general-content":8,"paragraphs":9,"list":10,"section1":11,"section2":12,"section3":13,"section4":14,"section5":15,"section1-title":16,"section1-content":17,"H1_BEG":18,"text":19,"H_END":20,"section1-content-item":21,"section2-title":22,"section2-content":23,"H2_BEG":24,"section2-content-item":25,"section3-title":26,"section3-content":27,"H3_BEG":28,"section3-content-item":29,"section4-title":30,"section4-content":31,"H4_BEG":32,"section4-content-item":33,"section5-title":34,"section5-content":35,"H5_BEG":36,"section5-content-item":37,"paragraph":38,"lines-of-text":39,"blank-line":40,"line-of-text":41,"text-content":42,"line-ending":43,"text-content-item":44,"template":45,"link":46,"rich-text":47,"bold-italics-text":48,"plain-text":49,"no-wiki":50,"text-constant":51,"raw-text":52,"UNICODE":53,"TEXT":54,"bold-italics-content":55,"bold-italics-content-item":56,"bold-content":57,"bold-content-item":58,"italic-text-nested":59,"italics-content":60,"italics-content-item":61,"bold-text-nested":62,"italic-text":63,"ITALICS":64,"bold-text":65,"BOLD":66,"bold-italics-mix":67,"BOLD_ITALICS":68,"NO_WIKI_START":69,"NO_WIKI_END":70,"NEWLINE":71,"blank-lines":72,"EMPTY_LINE":73,"TEMPLATE_START":74,"template-name":75,"TEMPLATE_END":76,"template-params":77,"TEMPLATE_PARAM_SEPARATOR":78,"template-param":79,"template-param-content":80,"LINK_START":81,"link-ref":82,"LINK_END":83,"link-params":84,"LINK_PARAM_SEPARATOR":85,"link-param":86,"OL":87,"list-items":88,"OL_E":89,"UL":90,"UL_E":91,"DL":92,"DL_E":93,"INDENT":94,"INDENT_E":95,"list-item":96,"LI":97,"EOF":98,"$accept":0,"$end":1},
terminals_: {2:"error",18:"H1_BEG",20:"H_END",24:"H2_BEG",28:"H3_BEG",32:"H4_BEG",36:"H5_BEG",53:"UNICODE",54:"TEXT",64:"ITALICS",66:"BOLD",68:"BOLD_ITALICS",69:"NO_WIKI_START",70:"NO_WIKI_END",71:"NEWLINE",73:"EMPTY_LINE",74:"TEMPLATE_START",76:"TEMPLATE_END",78:"TEMPLATE_PARAM_SEPARATOR",81:"LINK_START",83:"LINK_END",85:"LINK_PARAM_SEPARATOR",87:"OL",89:"OL_E",90:"UL",91:"UL_E",92:"DL",93:"DL_E",94:"INDENT",95:"INDENT_E",97:"LI",98:"EOF"},
productions_: [0,[3,2],[3,1],[4,1],[6,1],[6,1],[6,2],[6,2],[8,1],[8,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[7,2],[11,2],[11,1],[16,3],[17,1],[17,2],[21,1],[21,1],[21,1],[21,1],[21,1],[12,2],[12,1],[22,3],[23,1],[23,2],[25,1],[25,1],[25,1],[25,1],[13,2],[13,1],[26,3],[27,1],[27,2],[29,1],[29,1],[29,1],[14,2],[14,1],[30,3],[31,1],[31,2],[33,1],[33,1],[15,2],[15,1],[34,3],[35,1],[35,2],[37,1],[9,1],[9,2],[38,1],[38,1],[38,2],[39,2],[39,1],[41,2],[41,1],[42,1],[42,2],[44,1],[44,1],[44,1],[19,1],[19,2],[47,1],[47,1],[47,1],[49,1],[49,2],[51,1],[51,1],[52,1],[52,2],[55,1],[55,2],[56,1],[56,1],[56,1],[56,1],[57,1],[57,2],[58,1],[58,1],[60,1],[60,2],[61,1],[61,1],[63,3],[65,3],[59,3],[62,3],[67,3],[67,7],[67,7],[67,5],[67,5],[48,1],[48,1],[48,1],[50,3],[43,1],[72,2],[72,1],[40,1],[45,3],[45,4],[75,1],[75,2],[75,2],[77,2],[77,1],[77,3],[77,2],[79,1],[79,2],[80,1],[80,1],[80,1],[46,3],[46,4],[82,1],[84,2],[84,1],[84,3],[84,2],[86,1],[10,3],[10,3],[10,3],[10,3],[88,1],[88,2],[96,2],[96,3],[96,2],[5,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {t: 'wiki-page', c:[$$[$0-1], $$[$0]]};
break;
case 2:
 return {t: 'wiki-page', c:[$$[$0]]};
break;
case 3: case 132: case 137:
 this.$ = $$[$0]; 
break;
case 4: case 5:
 this.$ = {t: 'article', c:[$$[$0]]};
break;
case 6: case 7: case 15: case 16: case 17: case 18: case 19: case 24: case 34: case 43: case 51: case 58: case 61: case 65: case 75: case 113: case 126:
 $$[$0-1].c.push($$[$0]); this.$ = $$[$0-1]; 
break;
case 10: case 11: case 12: case 13: case 14:
 this.$ = {t: 'sections', c:[$$[$0]]}; 
break;
case 20:
 this.$ = {t: 'section1', c:[$$[$0-1], $$[$0]]}; 
break;
case 21:
 this.$ = {t: 'section1', c:[$$[$0]]}; 
break;
case 22:
 this.$ = {t: 'section1-title', c:[$$[$0-1]]}; 
break;
case 23:
 this.$ = {t: 'section1-content', c:[$$[$0]]}; 
break;
case 30:
 this.$ = {t: 'section2', c:[$$[$0-1], $$[$0]]}; 
break;
case 31:
 this.$ = {t: 'section2', c:[$$[$0]]}; 
break;
case 32:
 this.$ = {t: 'section2-title', c:[$$[$0-1]]}; 
break;
case 33:
 this.$ = {t: 'section2-content', c:[$$[$0]]}; 
break;
case 39:
 this.$ = {t: 'section3', c:[$$[$0-1], $$[$0]]}; 
break;
case 40:
 this.$ = {t: 'section3', c:[$$[$0]]}; 
break;
case 41:
 this.$ = {t: 'section3-title', c:[$$[$0-1]]}; 
break;
case 42:
 this.$ = {t: 'section3-content', c:[$$[$0]]}; 
break;
case 47:
 this.$ = {t: 'section4', c:[$$[$0-1], $$[$0]]}; 
break;
case 48:
 this.$ = {t: 'section4', c:[$$[$0]]}; 
break;
case 49:
 this.$ = {t: 'section4-title', c:[$$[$0-1]]}; 
break;
case 50:
 this.$ = {t: 'section4-content', c:[$$[$0]]}; 
break;
case 54:
 this.$ = {t: 'section5', c:[$$[$0-1], $$[$0]]}; 
break;
case 55:
 this.$ = {t: 'section5', c:[$$[$0]]}; 
break;
case 56:
 this.$ = {t: 'section5-title', c:[$$[$0-1]]}; 
break;
case 57:
 this.$ = {t: 'section5-content', c:[$$[$0]]}; 
break;
case 60:
 this.$ = {t: 'paragraphs', c:[$$[$0]]};
break;
case 62: case 63:
 this.$ = {t: 'paragraph', c:[$$[$0]]};
break;
case 64:
 this.$ = {t: 'paragraph', c:[$$[$0-1], $$[$0]]};
break;
case 66:
 this.$ = {t: 'lines-of-text', c:[$$[$0]]}; 
break;
case 67:
 this.$ = {t: 'line-of-text', c: $$[$0-1].concat([$$[$0]])}; 
break;
case 68:
 this.$ = {t: 'line-of-text', c: $$[$0]}; 
break;
case 69: case 121: case 133: case 142:
 this.$ = [$$[$0]]; 
break;
case 70: case 86: case 92: case 96: case 143:
 this.$ = $$[$0-1].concat([$$[$0]]); 
break;
case 74:
 this.$ = {t: 'text', c: [$$[$0]]}; 
break;
case 79:
 this.$ = {t: 'plain-text', v: $$[$0]}; 
break;
case 80:
 $$[$0-1].v += $$[$0]; this.$ = $$[$0-1]; 
break;
case 81: case 83:
 this.$ = $$[$0] 
break;
case 82:
 this.$ = JSON.parse('"'+$$[$0]+'"'); 
break;
case 84:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 85: case 91: case 95:
 this.$ = [$$[$0]] 
break;
case 99: case 101:
 this.$ = {t: 'italic-text', c: $$[$0-1]}; 
break;
case 100: case 102:
 this.$ = {t: 'bold-text', c: $$[$0-1]}; 
break;
case 103:
 this.$ = {t: 'bold-text', c: [{t: 'italic-text', c: $$[$0-1]}]}; 
break;
case 104:
 this.$ = {t: 'bold-text', c: [{t: 'italic-text', c: $$[$0-5]}].concat($$[$0-3],[{t: 'italic-text', c: $$[$0-1]}])}; 
break;
case 105:
 this.$ = {t: 'italic-text', c: [{t: 'bold-text', c: $$[$0-5]}].concat($$[$0-3],[{t: 'bold-text', c: $$[$0-1]}])}; 
break;
case 106:
 this.$ = {t: 'bold-text', c: [{t: 'italic-text', c: $$[$0-3]}].concat($$[$0-1])}; 
break;
case 107:
 this.$ = {t: 'italic-text', c: [{t: 'bold-text', c: $$[$0-3]}].concat($$[$0-1])}; 
break;
case 111:
 this.$ = {t: 'no-wiki', c: [{t: 'plain-text', v: $$[$0-1] }]}; 
break;
case 112:
 this.$ = {t: 'line-end', v: $$[$0]};
break;
case 114:
 this.$ = {t: 'blank-lines', c: [$$[$0]]};
break;
case 115:
 this.$ = {t: 'blank-line', v: $$[$0]};
break;
case 116:
 this.$ = {t: 'template', c: [$$[$0-1]]}; 
break;
case 117:
 this.$ = {t: 'template', c: [$$[$0-2]].concat($$[$0-1]) }; 
break;
case 118: case 119:
 this.$ = {t: 'template-name', c: [$$[$0]] }; 
break;
case 120:
 this.$ = {t: 'template-name', c: [$$[$0-1]] }; 
break;
case 122: case 134:
 this.$ = [null]; 
break;
case 123: case 135:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 124: case 136:
 $$[$0-1].push(null); this.$ = $$[$0-1]; 
break;
case 125:
 this.$ = {t: 'template-param', c: [$$[$0]] }; 
break;
case 130:
 this.$ = {t: 'link', c:[$$[$0-1]] }; 
break;
case 131:
 this.$ = {t: 'link', c: [$$[$0-2]].concat($$[$0-1]) }; 
break;
case 138:
 this.$ = {t:'ordered-list', c: $$[$0-1]}; 
break;
case 139: case 140:
 this.$ = {t:'unordered-list', c: $$[$0-1]}; 
break;
case 141:
 this.$ = {t:'indented-list', c: $$[$0-1]}; 
break;
case 144: case 146:
 this.$ = {t: 'list-item', c: [$$[$0]]}; 
break;
case 145:
 this.$ = {t: 'list-item', c: [$$[$0-1], $$[$0]]}; 
break;
case 147:
 this.$ = {t: 'eof'};
break;
}
},
table: [{3:1,4:2,5:3,6:4,7:6,8:7,9:13,10:14,11:8,12:9,13:10,14:11,15:12,16:15,18:$V0,19:36,22:16,24:$V1,26:17,28:$V2,30:18,32:$V3,34:19,36:$V4,38:20,39:30,40:31,41:32,42:34,44:35,45:37,46:38,47:39,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh,98:$Vi},{1:[3]},{5:56,98:$Vi},{1:[2,2]},{7:58,8:57,9:13,10:14,11:8,12:9,13:10,14:11,15:12,16:15,18:$V0,19:36,22:16,24:$V1,26:17,28:$V2,30:18,32:$V3,34:19,36:$V4,38:20,39:30,40:31,41:32,42:34,44:35,45:37,46:38,47:39,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh,98:[2,3]},{1:[2,147]},o($Vj,[2,4],{16:15,22:16,26:17,30:18,34:19,11:59,12:60,13:61,14:62,15:63,18:$V0,24:$V1,28:$V2,32:$V3,36:$V4}),o($Vk,[2,5]),o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),o([18,24,28,32,36,87,90,92,94,98],[2,8],{39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,38:64,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd}),o($Vk,[2,9]),o($Vl,[2,21],{9:13,10:14,22:16,26:17,30:18,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,17:65,21:66,8:67,12:68,13:69,14:70,15:71,24:$V1,28:$V2,32:$V3,36:$V4,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh}),o($Vm,[2,31],{9:13,10:14,26:17,30:18,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,23:72,25:73,8:74,13:75,14:76,15:77,28:$V2,32:$V3,36:$V4,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh}),o($Vn,[2,40],{9:13,10:14,30:18,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,27:78,29:79,8:80,14:81,15:82,32:$V3,36:$V4,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh}),o($Vo,[2,48],{9:13,10:14,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,31:83,33:84,8:85,15:86,36:$V4,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh}),o($Vp,[2,55],{9:13,10:14,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,35:87,37:88,8:89,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh}),o($Vk,[2,60]),{88:90,96:91,97:$Vq},{88:93,96:91,97:$Vq},{88:94,96:91,97:$Vq},{88:95,96:91,97:$Vq},{19:96,47:39,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va},{19:97,47:39,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va},{19:98,47:39,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va},{19:99,47:39,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va},{19:100,47:39,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va},o($Vr,[2,62],{42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,41:101,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,74:$Vc,81:$Vd}),o($Vr,[2,63],{41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,39:102,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,74:$Vc,81:$Vd}),o($Vk,[2,66]),o([18,24,28,32,36,53,54,64,66,68,69,71,73,74,76,78,81,87,90,92,94,98],[2,115]),o([18,24,28,32,36,73,87,89,90,91,92,93,94,95,97,98],[2,68],{19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,43:103,44:104,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,71:$Vs,74:$Vc,81:$Vd}),o($Vt,[2,69]),o([18,24,28,32,36,71,73,74,76,78,81,87,89,90,91,92,93,94,95,97,98],[2,71],{48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,47:106,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va}),o($Vu,[2,72]),o($Vu,[2,73]),o($Vv,[2,74]),{49:108,51:48,52:53,53:$V5,54:$V6,71:[1,109],75:107},{49:111,51:48,52:53,53:$V5,54:$V6,82:110},o($Vv,[2,76]),o([18,20,24,28,32,36,64,66,68,69,71,73,74,76,78,81,83,85,87,89,90,91,92,93,94,95,97,98],[2,77],{52:53,51:112,53:$V5,54:$V6}),o($Vv,[2,78]),o($Vv,[2,108]),o($Vv,[2,109]),o($Vv,[2,110]),o($Vv,[2,79]),{52:113,54:$V6},{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,55:114,56:115,69:$Va,74:$Vc,81:$Vd},{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:122,60:120,61:121,62:123,66:$Vw,69:$Va,74:$Vc,81:$Vd},{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:127,57:125,58:126,59:128,64:$Vx,69:$Va,74:$Vc,81:$Vd},o([18,20,24,28,32,36,53,64,66,68,69,71,73,74,76,78,81,83,85,87,89,90,91,92,93,94,95,97,98],[2,81],{54:$Vy}),o($Vv,[2,82]),o($Vz,[2,83]),{1:[2,1]},o($Vk,[2,6]),o($Vj,[2,7],{16:15,22:16,26:17,30:18,34:19,11:59,12:60,13:61,14:62,15:63,18:$V0,24:$V1,28:$V2,32:$V3,36:$V4}),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,61]),o($Vl,[2,20],{9:13,10:14,22:16,26:17,30:18,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,8:67,12:68,13:69,14:70,15:71,21:131,24:$V1,28:$V2,32:$V3,36:$V4,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh}),o($Vk,[2,23]),o($Vk,[2,25]),o($Vk,[2,26]),o($Vk,[2,27]),o($Vk,[2,28]),o($Vk,[2,29]),o($Vm,[2,30],{9:13,10:14,26:17,30:18,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,8:74,13:75,14:76,15:77,25:132,28:$V2,32:$V3,36:$V4,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh}),o($Vk,[2,33]),o($Vk,[2,35]),o($Vk,[2,36]),o($Vk,[2,37]),o($Vk,[2,38]),o($Vn,[2,39],{9:13,10:14,30:18,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,8:80,14:81,15:82,29:133,32:$V3,36:$V4,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh}),o($Vk,[2,42]),o($Vk,[2,44]),o($Vk,[2,45]),o($Vk,[2,46]),o($Vo,[2,47],{9:13,10:14,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,8:85,15:86,33:134,36:$V4,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh}),o($Vk,[2,50]),o($Vk,[2,52]),o($Vk,[2,53]),o($Vp,[2,54],{9:13,10:14,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,8:89,37:135,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,73:$Vb,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh}),o($Vk,[2,57]),o($Vk,[2,59]),{89:[1,136],96:137,97:$Vq},o($VA,[2,142]),{10:139,19:36,41:138,42:34,44:35,45:37,46:38,47:39,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va,74:$Vc,81:$Vd,87:$Ve,90:$Vf,92:$Vg,94:$Vh},{91:[1,140],96:137,97:$Vq},{93:[1,141],96:137,97:$Vq},{95:[1,142],96:137,97:$Vq},{20:[1,143],47:106,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va},{20:[1,144],47:106,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va},{20:[1,145],47:106,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va},{20:[1,146],47:106,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va},{20:[1,147],47:106,48:42,49:43,50:44,51:48,52:53,53:$V5,54:$V6,63:46,64:$V7,65:47,66:$V8,67:45,68:$V9,69:$Va},o($Vk,[2,65]),o($Vr,[2,64],{42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,41:101,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,74:$Vc,81:$Vd}),o($VB,[2,67]),o($Vt,[2,70]),o($Vu,[2,112]),o($Vv,[2,75]),{76:[1,148],77:149,78:[1,150]},o($VC,[2,118],{52:53,51:112,53:$V5,54:$V6,71:[1,151]}),{49:152,51:48,52:53,53:$V5,54:$V6},{83:[1,153],84:154,85:[1,155]},o($VD,[2,132],{52:53,51:112,53:$V5,54:$V6}),o($Vv,[2,80]),{54:$Vy,70:[1,156]},{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:160,64:[1,158],66:[1,159],68:[1,157],69:$Va,74:$Vc,81:$Vd},o($VE,[2,85]),o([64,66,68,69,74,81],[2,87],{52:53,51:112,53:$V5,54:$V6}),o($VE,[2,88]),o($VE,[2,89]),o($VE,[2,90]),{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:122,61:162,62:123,64:[1,161],66:$Vw,69:$Va,74:$Vc,81:$Vd},o($VF,[2,95]),o($VF,[2,97]),o($VF,[2,98]),{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,55:163,56:115,69:$Va,74:$Vc,81:$Vd},{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:127,58:165,59:128,64:$Vx,66:[1,164],69:$Va,74:$Vc,81:$Vd},o($VF,[2,91]),o($VF,[2,93]),o($VF,[2,94]),{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,55:166,56:115,69:$Va,74:$Vc,81:$Vd},o($Vz,[2,84]),o($Vk,[2,24]),o($Vk,[2,34]),o($Vk,[2,43]),o($Vk,[2,51]),o($Vk,[2,58]),o($VB,[2,138]),o($VA,[2,143]),o($VA,[2,144],{10:167,87:$Ve,90:$Vf,92:$Vg,94:$Vh}),o($VA,[2,146]),o($VB,[2,139]),o($VB,[2,140]),o($VB,[2,141]),o($Vk,[2,22]),o($Vk,[2,32]),o($Vk,[2,41]),o($Vk,[2,49]),o($Vk,[2,56]),o($Vu,[2,116]),{76:[1,168],78:[1,169]},o($VC,[2,122],{19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,79:170,80:171,44:172,43:173,40:174,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,71:$Vs,73:$Vb,74:$Vc,81:$Vd}),o($VC,[2,120]),o($VC,[2,119],{52:53,51:112,53:$V5,54:$V6}),o($Vu,[2,130]),{83:[1,175],85:[1,176]},o($VD,[2,134],{47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,86:177,19:178,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va}),o($Vv,[2,111]),o($Vv,[2,103]),{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:127,57:179,58:126,59:128,64:$Vx,69:$Va,74:$Vc,81:$Vd},{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:122,60:180,61:121,62:123,66:$Vw,69:$Va,74:$Vc,81:$Vd},o($VE,[2,86]),o($Vv,[2,99]),o($VF,[2,96]),{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:160,66:$VG,69:$Va,74:$Vc,81:$Vd},o($Vv,[2,100]),o($VF,[2,92]),{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:160,64:$VH,69:$Va,74:$Vc,81:$Vd},o($VA,[2,145]),o($Vu,[2,117]),o($VC,[2,124],{19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,80:171,44:172,43:173,40:174,79:183,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,71:$Vs,73:$Vb,74:$Vc,81:$Vd}),o($VC,[2,121],{19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,44:172,43:173,40:174,80:184,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,71:$Vs,73:$Vb,74:$Vc,81:$Vd}),o($VI,[2,125]),o($VI,[2,127]),o($VI,[2,128]),o($VI,[2,129]),o($Vu,[2,131]),o($VD,[2,136],{47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,19:178,86:185,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va}),o($VD,[2,133]),o($VD,[2,137],{48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,47:106,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va}),{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:127,58:165,59:128,64:[1,186],66:[1,187],69:$Va,74:$Vc,81:$Vd},{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:122,61:162,62:123,64:[1,189],66:[1,188],69:$Va,74:$Vc,81:$Vd},o($VF,[2,102]),o($VF,[2,101]),o($VC,[2,123],{19:36,45:37,46:38,47:39,48:42,49:43,50:44,67:45,63:46,65:47,51:48,52:53,44:172,43:173,40:174,80:184,53:$V5,54:$V6,64:$V7,66:$V8,68:$V9,69:$Va,71:$Vs,73:$Vb,74:$Vc,81:$Vd}),o($VI,[2,126]),o($VD,[2,135]),{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,55:190,56:115,69:$Va,74:$Vc,81:$Vd},o($Vv,[2,106]),{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,55:191,56:115,69:$Va,74:$Vc,81:$Vd},o($Vv,[2,107]),{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:160,64:$VH,68:[1,192],69:$Va,74:$Vc,81:$Vd},{45:119,46:118,49:116,50:117,51:48,52:53,53:$V5,54:$V6,56:160,66:$VG,68:[1,193],69:$Va,74:$Vc,81:$Vd},o($Vv,[2,104]),o($Vv,[2,105])],
defaultActions: {3:[2,2],5:[2,147],56:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    /*
     * This chunk is included in the parser code, before the lexer definition section and after the parser has been defined.
     *
     * WARNING:
     *
     * Meanwhile, keep in mind that all the parser actions, which will execute inside the `parser.performAction()` function,
     * will have a `this` pointing to `$$`.
     *
     * If you want to access the lexer and/or parser, these are accessible inside the parser rule action code via
     * the `yy.lexer` and `yy.parser` dereferences respectively.
     */

    // console.log("This chunk is included in the parser code");


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    function CreateListStack () {
        var stack = [''];
        return {
            push: function(v) { stack.push(v); },
            pop: function() { return stack.pop(); },
            peek: function() { return stack[stack.length-1]; }
        };
    }

    var tokensListStart = {
        "*":'UL',
        "#":'OL',
        ";":'DL',
        ":":'INDENT'
    };
    var tokensListEnd = {
        "*":'UL_E',
        "#":'OL_E',
        ";":'DL_E',
        ":":'INDENT_E'
    };

    function processList(lex, sig) {
        if (! lex.listStack ) {
            lex.listStack = CreateListStack();
        }
        var startSig = lex.listStack.peek();

        function innerProcessList(lex, sig) {
            var listStack = lex.listStack;
            var tokens = [];
            if (listStack.peek() === sig) {
                // Matches, so we have a list item or empty
                if (sig.length) {
                    return ['LI'];
                } else {
                    return [];
                }
            }

            // Start a nested list?
            var currentSig = listStack.peek();
            if (sig.substr(0, currentSig.length) === currentSig) {
                if (currentSig && currentSig != startSig) {
                    tokens.push('LI');
                }
                tokens.push(tokensListStart[sig[currentSig.length]]);
                listStack.push(sig.substr(0, currentSig.length+1));
                lex.begin('list');
                return tokens.concat(innerProcessList(lex, sig));
            }
            // End of list, stop one at a time.
            tokens.push(tokensListEnd[currentSig[currentSig.length-1]]);
            listStack.pop();
            lex.popState();
            return tokens.concat(innerProcessList(lex, sig));
        }
        return innerProcessList(lex, sig);
    }


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 20
break;
case 1:
                                        if (yy_.yylloc.first_column) {
                                            return 54               /* '=' anywhere but at the begging becomes just text */
                                        } else {
                                            return 'H'+yy_.yytext.trim().length+'_BEG';
                                        }
                                    
break;
case 2:
                                        this.begin('template'); return 74;
                                    
break;
case 3:
                                        this.popState(); return 76;
                                    
break;
case 4:return 78
break;
case 5:
                                        this.begin('link'); return 81;
                                    
break;
case 6:
                                        this.popState(); return 83;
                                    
break;
case 7:return 85
break;
case 8:  /* <nowiki> */
                                        this.begin('nowiki'); return 69;
                                    
break;
case 9: /* </nowiki> */
                                        this.popState(); return 70;
                                    
break;
case 10:return 54
break;
case 11:  /* List Item */
                                        if (!yy_.yylloc.first_column) {
                                            return processList(this, yy_.yytext);
                                        } else {
                                            return 54; /* treat list characters in the middle of a line as text. */
                                        }
                                    
break;
case 12:  /* End of List */
                                        return ['NEWLINE'].concat(processList(this, ''));
                                    
break;
case 13:  /* End of List */
                                        return processList(this, '').concat(['EOF']);
                                    
break;
case 14:  /* Start List Mode */
                                        if (!yy_.yylloc.first_column) {
                                            return processList(this, yy_.yytext);
                                        } else {
                                            return 54; /* treat list characters in the middle of a line as text. */
                                        }
                                    
break;
case 15:return 54
break;
case 16:return 68
break;
case 17:return 54
break;
case 18:return 66
break;
case 19:return 64
break;
case 20:return 54
break;
case 21:return 53
break;
case 22:return 98
break;
case 23:
                                        if (yy_.yylloc.first_column)
                                            return 71;
                                        else
                                            return 73;
                                    
break;
case 24:return 54
break;
case 25:return 54
break;
}
},
rules: [/^(?:([ \t])*[=]+([ \t])*(\n|$))/,/^(?:([ \t])*[=]{1,5}([ \t])*)/,/^(?:[{][{])/,/^(?:[}][}])/,/^(?:[|])/,/^(?:[[][[])/,/^(?:[\]][\]])/,/^(?:[|])/,/^(?:[<]\s*nowiki\s*[>])/,/^(?:[<]\s*[\/]nowiki\s*[>])/,/^(?:.)/,/^(?:([:#*;])+)/,/^(?:[\n](?=([^:#*;])+))/,/^(?:$)/,/^(?:([:#*;])+)/,/^(?:[']+(?=('''''))($|[^']))/,/^(?:('''''))/,/^(?:['](?=(''')))/,/^(?:('''))/,/^(?:(''))/,/^(?:['])/,/^(?:\\u[0-9a-fA-F]{4})/,/^(?:$)/,/^(?:(\r|\n|\n\r|\r\n))/,/^(?:([^|[\]*#:;<>='{}\n])+)/,/^(?:.)/],
conditions: {"nowiki":{"rules":[9,10],"inclusive":false},"template":{"rules":[0,1,2,3,4,5,8,14,15,16,17,18,19,20,21,22,23,24,25],"inclusive":true},"link":{"rules":[0,1,2,5,6,7,8,14,15,16,17,18,19,20,21,22,23,24,25],"inclusive":true},"list":{"rules":[0,1,2,5,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"inclusive":true},"INITIAL":{"rules":[0,1,2,5,8,14,15,16,17,18,19,20,21,22,23,24,25],"inclusive":true}}
});
/* Begin Lexer Customization Methods */
    (function (){
        var _originalLexMethod = lexer.lex;
        var _tokenCache = [];
        var _debug = false;
        var tokenMap = [];

        function log() {
            if (_debug) {
                console.log.apply(console, arguments);
            }
        }

        function getTokenText(token) {
            if (Number.isInteger(token)) {
                return tokenMap[token] || ('Token Not Found: ' + token);
            }
            return token;
        }

        lexer.lex = function() {
            var token = _tokenCache.shift();
            if (token) {
                log(getTokenText(token));
                return token;
            }
            token = _originalLexMethod.call(this);
            if (Array.isArray(token)) {
                _tokenCache = token;
                return this.lex();
            }
            log(getTokenText(token));
            return token;
        };

        function setupTokenMap() {
            var symbols = parser.symbols_;
            for (token in symbols) {
                if (symbols.hasOwnProperty(token)) {
                    tokenMap[symbols[token]] = token;
                }
            }
        }

        setupTokenMap();
    }());
    /* End Lexer Customization Methods */;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = wiktionary;
exports.Parser = wiktionary.Parser;
exports.parse = function () { return wiktionary.parse.apply(wiktionary, arguments); };
exports.main = function (){};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}