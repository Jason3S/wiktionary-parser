/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,22],$V2=[1,23],$V3=[1,24],$V4=[1,25],$V5=[1,47],$V6=[1,48],$V7=[1,44],$V8=[1,45],$V9=[1,43],$Va=[1,42],$Vb=[1,27],$Vc=[1,33],$Vd=[1,34],$Ve=[1,5],$Vf=[50,51,61,63,65,66,70,71,78,84],$Vg=[16,22,26,30,34,84],$Vh=[16,22,26,30,34,50,51,61,63,65,66,70,71,78,84],$Vi=[16,84],$Vj=[16,22,84],$Vk=[16,22,26,84],$Vl=[16,22,26,30,84],$Vm=[16,22,26,30,34,70,84],$Vn=[16,22,26,30,34,50,51,61,63,65,66,68,70,71,73,75,78,84],$Vo=[1,91],$Vp=[16,18,22,26,30,34,50,51,61,63,65,66,68,70,71,73,75,78,80,82,84],$Vq=[1,110],$Vr=[1,115],$Vs=[1,116],$Vt=[16,18,22,26,30,34,50,51,61,63,65,66,67,68,70,71,73,75,78,80,82,84],$Vu=[73,75],$Vv=[80,82],$Vw=[50,51,61,63,65,66,71,78],$Vx=[50,51,61,63,66,71,78],$Vy=[1,160],$Vz=[50,51,61,63,65,66,68,70,71,73,75,78];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"wiki-page":3,"article":4,"end-of-file":5,"article-content":6,"sections":7,"paragraphs":8,"section1":9,"section2":10,"section3":11,"section4":12,"section5":13,"section1-title":14,"section1-content":15,"H1_BEG":16,"text":17,"H_END":18,"section1-content-item":19,"section2-title":20,"section2-content":21,"H2_BEG":22,"section2-content-item":23,"section3-title":24,"section3-content":25,"H3_BEG":26,"section3-content-item":27,"section4-title":28,"section4-content":29,"H4_BEG":30,"section4-content-item":31,"section5-title":32,"section5-content":33,"H5_BEG":34,"section5-content-item":35,"paragraph":36,"lines-of-text":37,"blank-line":38,"line-of-text":39,"text-content":40,"line-ending":41,"template":42,"link":43,"rich-text":44,"bold-italics-text":45,"plain-text":46,"no-wiki":47,"text-constant":48,"raw-text":49,"UNICODE":50,"TEXT":51,"bold-italics-content":52,"bold-italics-content-item":53,"bold-content":54,"bold-content-item":55,"italic-text-nested":56,"italics-content":57,"italics-content-item":58,"bold-text-nested":59,"italic-text":60,"ITALICS":61,"bold-text":62,"BOLD":63,"bold-italics-mix":64,"BOLD_ITALICS":65,"NO_WIKI_START":66,"NO_WIKI_END":67,"NEWLINE":68,"blank-lines":69,"EMPTY_LINE":70,"TEMPLATE_START":71,"template-name":72,"TEMPLATE_END":73,"template-params":74,"TEMPLATE_PARAM_SEPARATOR":75,"template-param":76,"template-param-content":77,"LINK_START":78,"link-ref":79,"LINK_END":80,"link-params":81,"LINK_PARAM_SEPARATOR":82,"link-param":83,"EOF":84,"$accept":0,"$end":1},
terminals_: {2:"error",16:"H1_BEG",18:"H_END",22:"H2_BEG",26:"H3_BEG",30:"H4_BEG",34:"H5_BEG",50:"UNICODE",51:"TEXT",61:"ITALICS",63:"BOLD",65:"BOLD_ITALICS",66:"NO_WIKI_START",67:"NO_WIKI_END",68:"NEWLINE",70:"EMPTY_LINE",71:"TEMPLATE_START",73:"TEMPLATE_END",75:"TEMPLATE_PARAM_SEPARATOR",78:"LINK_START",80:"LINK_END",82:"LINK_PARAM_SEPARATOR",84:"EOF"},
productions_: [0,[3,2],[3,1],[4,1],[6,1],[6,1],[6,2],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[7,2],[9,2],[9,1],[14,3],[15,1],[15,2],[19,1],[19,1],[19,1],[19,1],[19,1],[10,2],[10,1],[20,3],[21,1],[21,2],[23,1],[23,1],[23,1],[23,1],[11,2],[11,1],[24,3],[25,1],[25,2],[27,1],[27,1],[27,1],[12,2],[12,1],[28,3],[29,1],[29,2],[31,1],[31,1],[13,2],[13,1],[32,3],[33,1],[33,2],[35,1],[8,1],[8,2],[36,1],[36,1],[36,2],[37,2],[37,1],[39,2],[39,1],[40,1],[40,1],[40,1],[17,1],[17,2],[44,1],[44,1],[44,1],[46,1],[46,2],[48,1],[48,1],[49,1],[49,2],[52,1],[52,2],[53,1],[53,1],[53,1],[53,1],[54,1],[54,2],[55,1],[55,1],[57,1],[57,2],[58,1],[58,1],[60,3],[62,3],[56,3],[59,3],[64,3],[64,7],[64,5],[64,5],[45,1],[45,1],[45,1],[47,3],[41,1],[69,2],[69,1],[38,1],[42,3],[42,4],[72,1],[72,2],[72,2],[74,2],[74,1],[74,3],[74,2],[76,1],[76,2],[77,1],[77,1],[77,1],[43,3],[43,4],[79,1],[81,2],[81,1],[81,3],[81,2],[83,1],[5,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {t: 'wiki-page', c:[$$[$0-1], $$[$0]]};
break;
case 2:
 return {t: 'wiki-page', c:[$$[$0]]};
break;
case 3: case 127: case 132:
 this.$ = $$[$0]; 
break;
case 4: case 5:
 this.$ = {t: 'article', c:[$$[$0]]};
break;
case 6: case 7: case 13: case 14: case 15: case 16: case 17: case 22: case 32: case 41: case 49: case 56: case 59: case 63: case 71: case 108: case 121:
 $$[$0-1].c.push($$[$0]); this.$ = $$[$0-1]; 
break;
case 8: case 9: case 10: case 11: case 12:
 this.$ = {t: 'sections', c:[$$[$0]]}; 
break;
case 18:
 this.$ = {t: 'section1', c:[$$[$0-1], $$[$0]]}; 
break;
case 19:
 this.$ = {t: 'section1', c:[$$[$0]]}; 
break;
case 20:
 this.$ = {t: 'section1-title', c:[$$[$0-1]]}; 
break;
case 21:
 this.$ = {t: 'section1-content', c:[$$[$0]]}; 
break;
case 28:
 this.$ = {t: 'section2', c:[$$[$0-1], $$[$0]]}; 
break;
case 29:
 this.$ = {t: 'section2', c:[$$[$0]]}; 
break;
case 30:
 this.$ = {t: 'section2-title', c:[$$[$0-1]]}; 
break;
case 31:
 this.$ = {t: 'section2-content', c:[$$[$0]]}; 
break;
case 37:
 this.$ = {t: 'section3', c:[$$[$0-1], $$[$0]]}; 
break;
case 38:
 this.$ = {t: 'section3', c:[$$[$0]]}; 
break;
case 39:
 this.$ = {t: 'section3-title', c:[$$[$0-1]]}; 
break;
case 40:
 this.$ = {t: 'section3-content', c:[$$[$0]]}; 
break;
case 45:
 this.$ = {t: 'section4', c:[$$[$0-1], $$[$0]]}; 
break;
case 46:
 this.$ = {t: 'section4', c:[$$[$0]]}; 
break;
case 47:
 this.$ = {t: 'section4-title', c:[$$[$0-1]]}; 
break;
case 48:
 this.$ = {t: 'section4-content', c:[$$[$0]]}; 
break;
case 52:
 this.$ = {t: 'section5', c:[$$[$0-1], $$[$0]]}; 
break;
case 53:
 this.$ = {t: 'section5', c:[$$[$0]]}; 
break;
case 54:
 this.$ = {t: 'section5-title', c:[$$[$0-1]]}; 
break;
case 55:
 this.$ = {t: 'section5-content', c:[$$[$0]]}; 
break;
case 58:
 this.$ = {t: 'paragraphs', c:[$$[$0]]};
break;
case 60: case 61:
 this.$ = {t: 'paragraph', c:[$$[$0]]};
break;
case 62:
 this.$ = {t: 'paragraph', c:[$$[$0-1], $$[$0]]};
break;
case 64:
 this.$ = {t: 'lines-of-text', c:[$$[$0]]}; 
break;
case 65:
 this.$ = {t: 'line-of-text', c:[$$[$0-1], $$[$0]]}; 
break;
case 66:
 this.$ = {t: 'line-of-text', c:[$$[$0]]}; 
break;
case 70:
 this.$ = {t: 'text', c: [$$[$0]]}; 
break;
case 75:
 this.$ = {t: 'plain-text', v: $$[$0]}; 
break;
case 76:
 $$[$0-1].v += $$[$0]; this.$ = $$[$0-1]; 
break;
case 77: case 79:
 this.$ = $$[$0] 
break;
case 78:
 this.$ = JSON.parse('"'+$$[$0]+'"'); 
break;
case 80:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 81: case 87: case 91:
 this.$ = [$$[$0]] 
break;
case 82: case 88: case 92:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1] 
break;
case 95: case 97:
 this.$ = {t: 'italic-text', c: $$[$0-1]}; 
break;
case 96: case 98:
 this.$ = {t: 'bold-text', c: $$[$0-1]}; 
break;
case 99:
 this.$ = {t: 'bold-text', c: [{t: 'italic-text', c: $$[$0-1]}]}; 
break;
case 100:
 this.$ = {t: 'bold-text', c: [{t: 'italic-text', c: $$[$0-5]}].concat($$[$0-3],[{t: 'italic-text', c: $$[$0-1]}])}; 
break;
case 101:
 this.$ = {t: 'bold-text', c: [{t: 'italic-text', c: $$[$0-3]}].concat($$[$0-1])}; 
break;
case 102:
 this.$ = {t: 'italic-text', c: [{t: 'bold-text', c: $$[$0-3]}].concat($$[$0-1])}; 
break;
case 106:
 this.$ = {t: 'no-wiki', c: [{t: 'plain-text', v: $$[$0-1] }]}; 
break;
case 107:
 this.$ = {t: 'line-end', v: $$[$0]};
break;
case 109:
 this.$ = {t: 'blank-lines', c: [$$[$0]]};
break;
case 110:
 this.$ = {t: 'blank-line', v: $$[$0]};
break;
case 111:
 this.$ = {t: 'template', c: [$$[$0-1]]}; 
break;
case 112:
 this.$ = {t: 'template', c: [$$[$0-2]].concat($$[$0-1]) }; 
break;
case 113: case 114:
 this.$ = {t: 'template-name', c: [$$[$0]] }; 
break;
case 115:
 this.$ = {t: 'template-name', c: [$$[$0-1]] }; 
break;
case 116: case 128:
 this.$ = [$$[$0]]; 
break;
case 117: case 129:
 this.$ = [null]; 
break;
case 118: case 130:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 119: case 131:
 $$[$0-1].push(null); this.$ = $$[$0-1]; 
break;
case 120:
 this.$ = {t: 'template-param', c: [$$[$0]] }; 
break;
case 125:
 this.$ = {t: 'link', c:[$$[$0-1]] }; 
break;
case 126:
 this.$ = {t: 'link', c: [$$[$0-2]].concat($$[$0-1]) }; 
break;
case 133:
 this.$ = {t: 'eof'};
break;
}
},
table: [{3:1,4:2,5:3,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:14,16:$V0,17:29,20:15,22:$V1,24:16,26:$V2,28:17,30:$V3,32:18,34:$V4,36:13,37:19,38:20,39:26,40:28,42:30,43:31,44:32,45:35,46:36,47:37,48:41,49:46,50:$V5,51:$V6,60:39,61:$V7,62:40,63:$V8,64:38,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd,84:$Ve},{1:[3]},{5:49,84:$Ve},{1:[2,2]},{7:51,8:50,9:8,10:9,11:10,12:11,13:12,14:14,16:$V0,17:29,20:15,22:$V1,24:16,26:$V2,28:17,30:$V3,32:18,34:$V4,36:13,37:19,38:20,39:26,40:28,42:30,43:31,44:32,45:35,46:36,47:37,48:41,49:46,50:$V5,51:$V6,60:39,61:$V7,62:40,63:$V8,64:38,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd,84:[2,3]},{1:[2,133]},o($Vf,[2,4],{14:14,20:15,24:16,28:17,32:18,9:52,10:53,11:54,12:55,13:56,16:$V0,22:$V1,26:$V2,30:$V3,34:$V4}),o($Vg,[2,5],{37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,36:57,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,58]),o($Vi,[2,19],{36:13,20:15,24:16,28:17,32:18,37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,15:58,19:59,8:60,10:61,11:62,12:63,13:64,22:$V1,26:$V2,30:$V3,34:$V4,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vj,[2,29],{36:13,24:16,28:17,32:18,37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,21:65,23:66,8:67,11:68,12:69,13:70,26:$V2,30:$V3,34:$V4,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vk,[2,38],{36:13,28:17,32:18,37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,25:71,27:72,8:73,12:74,13:75,30:$V3,34:$V4,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vl,[2,46],{36:13,32:18,37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,29:76,31:77,8:78,13:79,34:$V4,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vg,[2,53],{36:13,37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,33:80,35:81,8:82,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vm,[2,60],{40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,39:83,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,71:$Vc,78:$Vd}),o($Vm,[2,61],{39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,37:84,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,71:$Vc,78:$Vd}),{17:85,44:32,45:35,46:36,47:37,48:41,49:46,50:$V5,51:$V6,60:39,61:$V7,62:40,63:$V8,64:38,65:$V9,66:$Va},{17:86,44:32,45:35,46:36,47:37,48:41,49:46,50:$V5,51:$V6,60:39,61:$V7,62:40,63:$V8,64:38,65:$V9,66:$Va},{17:87,44:32,45:35,46:36,47:37,48:41,49:46,50:$V5,51:$V6,60:39,61:$V7,62:40,63:$V8,64:38,65:$V9,66:$Va},{17:88,44:32,45:35,46:36,47:37,48:41,49:46,50:$V5,51:$V6,60:39,61:$V7,62:40,63:$V8,64:38,65:$V9,66:$Va},{17:89,44:32,45:35,46:36,47:37,48:41,49:46,50:$V5,51:$V6,60:39,61:$V7,62:40,63:$V8,64:38,65:$V9,66:$Va},o($Vh,[2,64]),o($Vn,[2,110]),o($Vh,[2,66],{41:90,68:$Vo}),o([16,22,26,30,34,68,70,71,73,75,78,84],[2,67],{45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,44:92,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va}),o($Vn,[2,68]),o($Vn,[2,69]),o($Vp,[2,70]),{46:94,48:41,49:46,50:$V5,51:$V6,68:[1,95],72:93},{46:97,48:41,49:46,50:$V5,51:$V6,79:96},o($Vp,[2,72]),o([16,18,22,26,30,34,61,63,65,66,68,70,71,73,75,78,80,82,84],[2,73],{49:46,48:98,50:$V5,51:$V6}),o($Vp,[2,74]),o($Vp,[2,103]),o($Vp,[2,104]),o($Vp,[2,105]),o($Vp,[2,75]),{49:99,51:$V6},{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,52:100,53:101,66:$Va,71:$Vc,78:$Vd},{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,53:108,57:106,58:107,59:109,63:$Vq,66:$Va,71:$Vc,78:$Vd},{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,53:113,54:111,55:112,56:114,61:$Vr,66:$Va,71:$Vc,78:$Vd},o([16,18,22,26,30,34,50,61,63,65,66,68,70,71,73,75,78,80,82,84],[2,77],{51:$Vs}),o($Vp,[2,78]),o($Vt,[2,79]),{1:[2,1]},o($Vg,[2,6],{37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,36:57,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vf,[2,7],{14:14,20:15,24:16,28:17,32:18,9:52,10:53,11:54,12:55,13:56,16:$V0,22:$V1,26:$V2,30:$V3,34:$V4}),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,59]),o($Vi,[2,18],{36:13,20:15,24:16,28:17,32:18,37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,8:60,10:61,11:62,12:63,13:64,19:117,22:$V1,26:$V2,30:$V3,34:$V4,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vh,[2,21]),o($Vg,[2,23],{37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,36:57,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vh,[2,24]),o($Vh,[2,25]),o($Vh,[2,26]),o($Vh,[2,27]),o($Vj,[2,28],{36:13,24:16,28:17,32:18,37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,8:67,11:68,12:69,13:70,23:118,26:$V2,30:$V3,34:$V4,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vh,[2,31]),o($Vg,[2,33],{37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,36:57,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vh,[2,34]),o($Vh,[2,35]),o($Vh,[2,36]),o($Vk,[2,37],{36:13,28:17,32:18,37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,8:73,12:74,13:75,27:119,30:$V3,34:$V4,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vh,[2,40]),o($Vg,[2,42],{37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,36:57,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vh,[2,43]),o($Vh,[2,44]),o($Vl,[2,45],{36:13,32:18,37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,8:78,13:79,31:120,34:$V4,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vh,[2,48]),o($Vg,[2,50],{37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,36:57,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vh,[2,51]),o($Vg,[2,52],{36:13,37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,8:82,35:121,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vh,[2,55]),o($Vg,[2,57],{37:19,38:20,39:26,40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,36:57,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,70:$Vb,71:$Vc,78:$Vd}),o($Vh,[2,63]),o($Vm,[2,62],{40:28,17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,39:83,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,71:$Vc,78:$Vd}),{18:[1,122],44:92,45:35,46:36,47:37,48:41,49:46,50:$V5,51:$V6,60:39,61:$V7,62:40,63:$V8,64:38,65:$V9,66:$Va},{18:[1,123],44:92,45:35,46:36,47:37,48:41,49:46,50:$V5,51:$V6,60:39,61:$V7,62:40,63:$V8,64:38,65:$V9,66:$Va},{18:[1,124],44:92,45:35,46:36,47:37,48:41,49:46,50:$V5,51:$V6,60:39,61:$V7,62:40,63:$V8,64:38,65:$V9,66:$Va},{18:[1,125],44:92,45:35,46:36,47:37,48:41,49:46,50:$V5,51:$V6,60:39,61:$V7,62:40,63:$V8,64:38,65:$V9,66:$Va},{18:[1,126],44:92,45:35,46:36,47:37,48:41,49:46,50:$V5,51:$V6,60:39,61:$V7,62:40,63:$V8,64:38,65:$V9,66:$Va},o($Vh,[2,65]),o($Vn,[2,107]),o($Vp,[2,71]),{73:[1,127],74:128,75:[1,129]},o($Vu,[2,113],{49:46,48:98,50:$V5,51:$V6,68:[1,130]}),{46:131,48:41,49:46,50:$V5,51:$V6},{80:[1,132],81:133,82:[1,134]},o($Vv,[2,127],{49:46,48:98,50:$V5,51:$V6}),o($Vp,[2,76]),{51:$Vs,67:[1,135]},{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,53:139,61:[1,137],63:[1,138],65:[1,136],66:$Va,71:$Vc,78:$Vd},o($Vw,[2,81]),o([61,63,65,66,71,78],[2,83],{49:46,48:98,50:$V5,51:$V6}),o($Vw,[2,84]),o($Vw,[2,85]),o($Vw,[2,86]),{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,53:108,58:141,59:109,61:[1,140],63:$Vq,66:$Va,71:$Vc,78:$Vd},o($Vx,[2,91]),o($Vx,[2,93]),o($Vx,[2,94]),{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,52:142,53:101,66:$Va,71:$Vc,78:$Vd},{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,53:113,55:144,56:114,61:$Vr,63:[1,143],66:$Va,71:$Vc,78:$Vd},o($Vx,[2,87]),o($Vx,[2,89]),o($Vx,[2,90]),{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,52:145,53:101,66:$Va,71:$Vc,78:$Vd},o($Vt,[2,80]),o($Vh,[2,22]),o($Vh,[2,32]),o($Vh,[2,41]),o($Vh,[2,49]),o($Vh,[2,56]),o($Vh,[2,20]),o($Vh,[2,30]),o($Vh,[2,39]),o($Vh,[2,47]),o($Vh,[2,54]),o($Vn,[2,111]),{73:[1,146],75:[1,147]},o($Vu,[2,117],{17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,76:148,77:149,40:150,41:151,38:152,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,68:$Vo,70:$Vb,71:$Vc,78:$Vd}),o($Vu,[2,115]),o($Vu,[2,114],{49:46,48:98,50:$V5,51:$V6}),o($Vn,[2,125]),{80:[1,153],82:[1,154]},o($Vv,[2,129],{44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,83:155,17:156,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va}),o($Vp,[2,106]),o($Vp,[2,99]),{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,53:113,54:157,55:112,56:114,61:$Vr,66:$Va,71:$Vc,78:$Vd},{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,53:108,57:158,58:107,59:109,63:$Vq,66:$Va,71:$Vc,78:$Vd},o($Vw,[2,82]),o($Vp,[2,95]),o($Vx,[2,92]),{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,53:139,63:[1,159],66:$Va,71:$Vc,78:$Vd},o($Vp,[2,96]),o($Vx,[2,88]),{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,53:139,61:$Vy,66:$Va,71:$Vc,78:$Vd},o($Vn,[2,112]),o($Vu,[2,119],{17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,77:149,40:150,41:151,38:152,76:161,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,68:$Vo,70:$Vb,71:$Vc,78:$Vd}),o($Vu,[2,116],{17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,40:150,41:151,38:152,77:162,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,68:$Vo,70:$Vb,71:$Vc,78:$Vd}),o($Vz,[2,120]),o($Vz,[2,122]),o($Vz,[2,123]),o($Vz,[2,124]),o($Vn,[2,126]),o($Vv,[2,131],{44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,17:156,83:163,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va}),o($Vv,[2,128]),o($Vv,[2,132],{45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,44:92,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va}),{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,53:113,55:144,56:114,61:[1,164],63:[1,165],66:$Va,71:$Vc,78:$Vd},{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,53:108,58:141,59:109,61:[1,166],63:$Vq,66:$Va,71:$Vc,78:$Vd},o($Vx,[2,98]),o($Vx,[2,97]),o($Vu,[2,118],{17:29,42:30,43:31,44:32,45:35,46:36,47:37,64:38,60:39,62:40,48:41,49:46,40:150,41:151,38:152,77:162,50:$V5,51:$V6,61:$V7,63:$V8,65:$V9,66:$Va,68:$Vo,70:$Vb,71:$Vc,78:$Vd}),o($Vz,[2,121]),o($Vv,[2,130]),{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,52:167,53:101,66:$Va,71:$Vc,78:$Vd},o($Vp,[2,101]),o($Vp,[2,102]),{42:105,43:104,46:102,47:103,48:41,49:46,50:$V5,51:$V6,53:139,61:$Vy,65:[1,168],66:$Va,71:$Vc,78:$Vd},o($Vp,[2,100])],
defaultActions: {3:[2,2],5:[2,133],49:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 18
break;
case 1:
                                        if (yy_.yylloc.first_column) {
                                            return 51               /* '=' anywhere but at the begging becomes just text */
                                        } else {
                                            return 'H'+yy_.yytext.trim().length+'_BEG';
                                        }
                                    
break;
case 2:
                                        if (yy_.yylloc.first_column)
                                            return 68
                                        else
                                            return 70;
                                    
break;
case 3:
                                        this.begin('template'); return 71;
                                    
break;
case 4:
                                        this.popState(); return 73;
                                    
break;
case 5:return 75
break;
case 6:
                                        this.begin('link'); return 78;
                                    
break;
case 7:
                                        this.popState(); return 80;
                                    
break;
case 8:return 82
break;
case 9:  /* <nowiki> */
                                        this.begin('nowiki'); return 66;
                                    
break;
case 10: /* </nowiki> */
                                        this.popState(); return 67;
                                    
break;
case 11:return 51
break;
case 12:return 51
break;
case 13:return 65
break;
case 14:return 51
break;
case 15:return 63
break;
case 16:return 61
break;
case 17:return 51
break;
case 18:return 50
break;
case 19:return 84
break;
case 20:return 51
break;
case 21:return 51
break;
}
},
rules: [/^(?:([ \t])*[=]+([ \t])*(\n|$))/,/^(?:([ \t])*[=]{1,5}([ \t])*)/,/^(?:(\r|\n|\n\r|\r\n))/,/^(?:[{][{])/,/^(?:[}][}])/,/^(?:[|])/,/^(?:[[][[])/,/^(?:[\]][\]])/,/^(?:[|])/,/^(?:[<]\s*nowiki\s*[>])/,/^(?:[<]\s*[\/]nowiki\s*[>])/,/^(?:.)/,/^(?:[']+(?=('''''))($|[^']))/,/^(?:('''''))/,/^(?:['](?=(''')))/,/^(?:('''))/,/^(?:(''))/,/^(?:['])/,/^(?:\\u[0-9a-fA-F]{4})/,/^(?:$)/,/^(?:([^|[\]*#:;<>='{}\n])+)/,/^(?:.)/],
conditions: {"nowiki":{"rules":[10,11],"inclusive":false},"template":{"rules":[0,1,2,3,4,5,6,9,12,13,14,15,16,17,18,19,20,21],"inclusive":true},"link":{"rules":[0,1,2,3,6,7,8,9,12,13,14,15,16,17,18,19,20,21],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,6,9,12,13,14,15,16,17,18,19,20,21],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}