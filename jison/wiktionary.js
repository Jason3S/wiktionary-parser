/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,22],$V2=[1,23],$V3=[1,24],$V4=[1,25],$V5=[1,40],$V6=[1,41],$V7=[1,38],$V8=[1,27],$V9=[1,33],$Va=[1,34],$Vb=[1,5],$Vc=[44,45,46,53,54,60,66],$Vd=[16,21,24,27,30,66],$Ve=[16,21,24,27,30,44,45,46,53,54,60,66],$Vf=[16,66],$Vg=[16,21,66],$Vh=[16,21,24,66],$Vi=[16,21,24,27,66],$Vj=[16,21,24,27,30,53,66],$Vk=[16,21,24,27,30,44,45,46,51,53,54,56,58,60,66],$Vl=[16,18,21,24,27,30,44,45,46,51,53,54,56,58,60,62,64,66],$Vm=[56,58],$Vn=[62,64],$Vo=[1,124],$Vp=[44,45,46],$Vq=[1,138],$Vr=[44,45,46,51,54,56,58,60],$Vs=[2,89],$Vt=[1,156];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"wiki-page":3,"article":4,"end-of-file":5,"article-content":6,"sections":7,"paragraphs":8,"section1":9,"section2":10,"section3":11,"section4":12,"section5":13,"section1-title":14,"section1-content":15,"H1_BEG":16,"text":17,"H_END":18,"section2-title":19,"section2-content":20,"H2_BEG":21,"section3-title":22,"section3-content":23,"H3_BEG":24,"section4-title":25,"section4-content":26,"H4_BEG":27,"section5-title":28,"section5-content":29,"H5_BEG":30,"paragraph":31,"lines-of-text":32,"blank-line":33,"line-of-text":34,"text-content":35,"line-ending":36,"template":37,"link":38,"rich-text":39,"bold-text":40,"italic-text":41,"plain-text":42,"text-constant":43,"TEXT":44,"UNICODE":45,"S_QUOTE":46,"italic-text-inner-text":47,"bold-text-inner":48,"italic-text-inner":49,"bold-text-inner-text":50,"NEWLINE":51,"blank-lines":52,"EMPTY_LINE":53,"TEMPLATE_START":54,"template-name":55,"TEMPLATE_END":56,"template-params":57,"TEMPLATE_PARAM_SEPARATOR":58,"template-param":59,"LINK_START":60,"link-ref":61,"LINK_END":62,"link-params":63,"LINK_PARAM_SEPARATOR":64,"link-param":65,"EOF":66,"$accept":0,"$end":1},
terminals_: {2:"error",16:"H1_BEG",18:"H_END",21:"H2_BEG",24:"H3_BEG",27:"H4_BEG",30:"H5_BEG",44:"TEXT",45:"UNICODE",46:"S_QUOTE",51:"NEWLINE",53:"EMPTY_LINE",54:"TEMPLATE_START",56:"TEMPLATE_END",58:"TEMPLATE_PARAM_SEPARATOR",60:"LINK_START",62:"LINK_END",64:"LINK_PARAM_SEPARATOR",66:"EOF"},
productions_: [0,[3,2],[3,1],[4,1],[6,1],[6,1],[6,2],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[7,2],[9,2],[9,1],[14,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,2],[15,2],[15,2],[15,2],[10,2],[10,1],[19,3],[20,1],[20,1],[20,1],[20,1],[20,2],[20,2],[20,2],[20,2],[11,2],[11,1],[22,3],[23,1],[23,1],[23,1],[23,2],[23,2],[23,2],[12,2],[12,1],[25,3],[26,1],[26,1],[26,2],[26,2],[13,2],[13,1],[28,3],[29,1],[29,2],[8,1],[8,2],[31,1],[31,1],[31,2],[32,2],[32,1],[34,2],[34,1],[35,1],[35,1],[35,1],[17,1],[17,2],[39,1],[39,1],[39,1],[42,1],[42,2],[43,1],[43,1],[41,5],[47,2],[47,2],[47,1],[47,1],[49,5],[40,7],[50,2],[50,2],[50,1],[50,1],[48,7],[36,1],[52,2],[52,1],[33,1],[37,3],[37,4],[55,1],[55,2],[55,2],[57,2],[57,1],[57,3],[57,2],[59,1],[59,1],[59,2],[59,2],[38,3],[38,4],[61,1],[63,2],[63,1],[63,3],[63,2],[65,1],[5,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {t: 'wiki-page', c:[$$[$0-1], $$[$0]]};
break;
case 2:
 return {t: 'wiki-page', c:[$$[$0]]};
break;
case 3: case 102: case 103: case 115: case 120:
 this.$ = $$[$0]; 
break;
case 4: case 5:
 this.$ = {t: 'article', c:[$$[$0]]};
break;
case 6: case 7: case 13: case 14: case 15: case 16: case 17: case 26: case 27: case 28: case 29: case 30: case 38: case 39: case 40: case 41: case 48: case 49: case 50: case 56: case 57: case 62: case 64: case 68: case 76: case 85: case 86: case 91: case 92: case 97: case 111:
 $$[$0-1].c.push($$[$0]); this.$ = $$[$0-1]; 
break;
case 8: case 9: case 10: case 11: case 12:
 this.$ = {t: 'sections', c:[$$[$0]]}; 
break;
case 18:
 this.$ = {t: 'section1', c:[$$[$0-1], $$[$0]]}; 
break;
case 19:
 this.$ = {t: 'section1', c:[$$[$0]]}; 
break;
case 20:
 this.$ = {t: 'section1-title', c:[$$[$0-1]]}; 
break;
case 21: case 22: case 23: case 24: case 25:
 this.$ = {t: 'section1-content', c:[$$[$0]]}; 
break;
case 31:
 this.$ = {t: 'section2', c:[$$[$0-1], $$[$0]]}; 
break;
case 32:
 this.$ = {t: 'section2', c:[$$[$0]]}; 
break;
case 33:
 this.$ = {t: 'section2-title', c:[$$[$0-1]]}; 
break;
case 34: case 35: case 36: case 37:
 this.$ = {t: 'section2-content', c:[$$[$0]]}; 
break;
case 42:
 this.$ = {t: 'section3', c:[$$[$0-1], $$[$0]]}; 
break;
case 43:
 this.$ = {t: 'section3', c:[$$[$0]]}; 
break;
case 44:
 this.$ = {t: 'section3-title', c:[$$[$0-1]]}; 
break;
case 45: case 46: case 47:
 this.$ = {t: 'section3-content', c:[$$[$0]]}; 
break;
case 51:
 this.$ = {t: 'section4', c:[$$[$0-1], $$[$0]]}; 
break;
case 52:
 this.$ = {t: 'section4', c:[$$[$0]]}; 
break;
case 53:
 this.$ = {t: 'section4-title', c:[$$[$0-1]]}; 
break;
case 54: case 55:
 this.$ = {t: 'section4-content', c:[$$[$0]]}; 
break;
case 58:
 this.$ = {t: 'section5', c:[$$[$0-1], $$[$0]]}; 
break;
case 59:
 this.$ = {t: 'section5', c:[$$[$0]]}; 
break;
case 60:
 this.$ = {t: 'section5-title', c:[$$[$0-1]]}; 
break;
case 61:
 this.$ = {t: 'section5-content', c:[$$[$0]]}; 
break;
case 63:
 this.$ = {t: 'paragraphs', c:[$$[$0]]};
break;
case 65: case 66:
 this.$ = {t: 'paragraph', c:[$$[$0]]};
break;
case 67:
 this.$ = {t: 'paragraph', c:[$$[$0-1], $$[$0]]};
break;
case 69:
 this.$ = {t: 'lines-of-text', c:[$$[$0]]}; 
break;
case 70:
 this.$ = {t: 'line-of-text', c:[$$[$0-1], $$[$0]]}; 
break;
case 71:
 this.$ = {t: 'line-of-text', c:[$$[$0]]}; 
break;
case 75:
 this.$ = {t: 'text', c: $$[$0]}; 
break;
case 80:
 this.$ = {t: 'plain-text', v: $$[$0]}; 
break;
case 81:
 $$[$0-1].v += $$[$0]; this.$ = $$[$0-1]; 
break;
case 82:
 this.$ = $$[$0] 
break;
case 83:
 this.$ = JSON.parse('"'+$$[$0]+'"'); 
break;
case 84:
 this.$ = {t: 'italic-text', c: $$[$0-2].c}; 
break;
case 87: case 88:
 this.$ = {t: 'italic-text-inner', c: [$$[$0]]}; 
break;
case 89:
 this.$ = {t: 'italic-text', c: [$$[$0-2]]}; 
break;
case 90:
 this.$ = {t: 'bold-text', c: $$[$0-3].c}; 
break;
case 93: case 94:
 this.$ = {t: 'bold-text-inner', c: [$$[$0]]}; 
break;
case 95:
 this.$ = {t: 'bold-text', c: [$$[$0-3]]}; 
break;
case 96:
 this.$ = {t: 'line-end'};
break;
case 98:
 this.$ = {t: 'blank-lines', c: [$$[$0]]};
break;
case 99:
 this.$ = {t: 'blank-line'};
break;
case 100:
 this.$ = {t: 'template', name: $$[$0-1], params: [] }; 
break;
case 101:
 this.$ = {t: 'template', name: $$[$0-2], params: $$[$0-1] }; 
break;
case 104: case 112:
 this.$ = $$[$0-1]; 
break;
case 105: case 116:
 this.$ = [$$[$0]]; 
break;
case 106: case 117:
 this.$ = [null]; 
break;
case 107: case 118:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 108: case 119:
 $$[$0-1].push(null); this.$ = $$[$0-1]; 
break;
case 109:
 this.$ = {t: 'template-param', c: [$$[$0]] }; 
break;
case 110:
 this.$ = {t: 'template-param', c: [] }; 
break;
case 113:
 this.$ = {t: 'link', c:[$$[$0-1]] }; 
break;
case 114:
 this.$ = {t: 'link', c: [$$[$0-2]].concat($$[$0-1]) }; 
break;
case 121:
 this.$ = {t: 'eof'};
break;
}
},
table: [{3:1,4:2,5:3,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:14,16:$V0,17:29,19:15,21:$V1,22:16,24:$V2,25:17,27:$V3,28:18,30:$V4,31:13,32:19,33:20,34:26,35:28,37:30,38:31,39:32,40:35,41:36,42:37,43:39,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va,66:$Vb},{1:[3]},{5:42,66:$Vb},{1:[2,2]},{7:44,8:43,9:8,10:9,11:10,12:11,13:12,14:14,16:$V0,17:29,19:15,21:$V1,22:16,24:$V2,25:17,27:$V3,28:18,30:$V4,31:13,32:19,33:20,34:26,35:28,37:30,38:31,39:32,40:35,41:36,42:37,43:39,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va,66:[2,3]},{1:[2,121]},o($Vc,[2,4],{14:14,19:15,22:16,25:17,28:18,9:45,10:46,11:47,12:48,13:49,16:$V0,21:$V1,24:$V2,27:$V3,30:$V4}),o($Vd,[2,5],{32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,31:50,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,63]),o($Vf,[2,19],{31:13,19:15,22:16,25:17,28:18,32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,15:51,8:52,10:53,11:54,12:55,13:56,21:$V1,24:$V2,27:$V3,30:$V4,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Vg,[2,32],{31:13,22:16,25:17,28:18,32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,20:57,8:58,11:59,12:60,13:61,24:$V2,27:$V3,30:$V4,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Vh,[2,43],{31:13,25:17,28:18,32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,23:62,8:63,12:64,13:65,27:$V3,30:$V4,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Vi,[2,52],{31:13,28:18,32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,26:66,8:67,13:68,30:$V4,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Vd,[2,59],{31:13,32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,29:69,8:70,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Vj,[2,65],{35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,34:71,44:$V5,45:$V6,46:$V7,54:$V9,60:$Va}),o($Vj,[2,66],{34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,32:72,44:$V5,45:$V6,46:$V7,54:$V9,60:$Va}),{17:73,39:32,40:35,41:36,42:37,43:39,44:$V5,45:$V6,46:$V7},{17:74,39:32,40:35,41:36,42:37,43:39,44:$V5,45:$V6,46:$V7},{17:75,39:32,40:35,41:36,42:37,43:39,44:$V5,45:$V6,46:$V7},{17:76,39:32,40:35,41:36,42:37,43:39,44:$V5,45:$V6,46:$V7},{17:77,39:32,40:35,41:36,42:37,43:39,44:$V5,45:$V6,46:$V7},o($Ve,[2,69]),o($Ve,[2,99]),o($Ve,[2,71],{36:78,51:[1,79]}),o([16,21,24,27,30,51,53,54,56,58,60,66],[2,72],{40:35,41:36,42:37,43:39,39:80,44:$V5,45:$V6,46:$V7}),o($Vk,[2,73]),o($Vk,[2,74]),o($Vl,[2,75]),{42:82,43:39,44:$V5,45:$V6,51:[1,83],55:81},{42:85,43:39,44:$V5,45:$V6,61:84},o($Vl,[2,77]),o($Vl,[2,78]),o([16,18,21,24,27,30,46,51,53,54,56,58,60,62,64,66],[2,79],{43:86,44:$V5,45:$V6}),{46:[1,87]},o($Vl,[2,80]),o($Vl,[2,82]),o($Vl,[2,83]),{1:[2,1]},o($Vd,[2,6],{32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,31:50,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Vc,[2,7],{14:14,19:15,22:16,25:17,28:18,9:45,10:46,11:47,12:48,13:49,16:$V0,21:$V1,24:$V2,27:$V3,30:$V4}),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),o($Ve,[2,17]),o($Ve,[2,64]),o($Vf,[2,18],{31:13,19:15,22:16,25:17,28:18,32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,8:88,10:89,11:90,12:91,13:92,21:$V1,24:$V2,27:$V3,30:$V4,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Vd,[2,21],{32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,31:50,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Ve,[2,22]),o($Ve,[2,23]),o($Ve,[2,24]),o($Ve,[2,25]),o($Vg,[2,31],{31:13,22:16,25:17,28:18,32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,8:93,11:94,12:95,13:96,24:$V2,27:$V3,30:$V4,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Vd,[2,34],{32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,31:50,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Ve,[2,35]),o($Ve,[2,36]),o($Ve,[2,37]),o($Vh,[2,42],{31:13,25:17,28:18,32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,8:97,12:98,13:99,27:$V3,30:$V4,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Vd,[2,45],{32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,31:50,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Ve,[2,46]),o($Ve,[2,47]),o($Vi,[2,51],{31:13,28:18,32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,8:100,13:101,30:$V4,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Vd,[2,54],{32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,31:50,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Ve,[2,55]),o($Vd,[2,58],{31:13,32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,8:102,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Vd,[2,61],{32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,31:50,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Ve,[2,68]),o($Vj,[2,67],{35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,34:71,44:$V5,45:$V6,46:$V7,54:$V9,60:$Va}),{18:[1,103],39:80,40:35,41:36,42:37,43:39,44:$V5,45:$V6,46:$V7},{18:[1,104],39:80,40:35,41:36,42:37,43:39,44:$V5,45:$V6,46:$V7},{18:[1,105],39:80,40:35,41:36,42:37,43:39,44:$V5,45:$V6,46:$V7},{18:[1,106],39:80,40:35,41:36,42:37,43:39,44:$V5,45:$V6,46:$V7},{18:[1,107],39:80,40:35,41:36,42:37,43:39,44:$V5,45:$V6,46:$V7},o($Ve,[2,70]),o($Ve,[2,96]),o($Vl,[2,76]),{56:[1,108],57:109,58:[1,110]},o($Vm,[2,102],{43:86,44:$V5,45:$V6,51:[1,111]}),{42:112,43:39,44:$V5,45:$V6},{62:[1,113],63:114,64:[1,115]},o($Vn,[2,115],{43:86,44:$V5,45:$V6}),o($Vl,[2,81]),{42:118,43:39,44:$V5,45:$V6,46:[1,116],47:117,48:119},o($Vd,[2,26],{32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,31:50,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Ve,[2,27]),o($Ve,[2,28]),o($Ve,[2,29]),o($Ve,[2,30]),o($Vd,[2,38],{32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,31:50,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Ve,[2,39]),o($Ve,[2,40]),o($Ve,[2,41]),o($Vd,[2,48],{32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,31:50,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Ve,[2,49]),o($Ve,[2,50]),o($Vd,[2,56],{32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,31:50,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Ve,[2,57]),o($Vd,[2,62],{32:19,33:20,34:26,35:28,17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,31:50,44:$V5,45:$V6,46:$V7,53:$V8,54:$V9,60:$Va}),o($Ve,[2,20]),o($Ve,[2,33]),o($Ve,[2,44]),o($Ve,[2,53]),o($Ve,[2,60]),o($Vk,[2,100]),{56:[1,120],58:[1,121]},o($Vm,[2,106],{17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,59:122,35:123,44:$V5,45:$V6,46:$V7,51:$Vo,54:$V9,60:$Va}),o($Vm,[2,104]),o($Vm,[2,103],{43:86,44:$V5,45:$V6}),o($Vk,[2,113]),{62:[1,125],64:[1,126]},o($Vn,[2,117],{39:32,40:35,41:36,42:37,43:39,65:127,17:128,44:$V5,45:$V6,46:$V7}),{42:131,43:39,44:$V5,45:$V6,46:[1,130],49:132,50:129},{42:134,43:39,44:$V5,45:$V6,46:[1,133],48:135},{43:86,44:$V5,45:$V6,46:[2,87]},o($Vp,[2,88]),o($Vk,[2,101]),o($Vm,[2,108],{17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,35:123,59:136,44:$V5,45:$V6,46:$V7,51:$Vo,54:$V9,60:$Va}),o($Vm,[2,105],{17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,35:137,44:$V5,45:$V6,46:$V7,51:$Vq,54:$V9,60:$Va}),o($Vr,[2,109]),o($Vr,[2,110]),o($Vk,[2,114]),o($Vn,[2,119],{39:32,40:35,41:36,42:37,43:39,17:128,65:139,44:$V5,45:$V6,46:$V7}),o($Vn,[2,116]),o($Vn,[2,120],{40:35,41:36,42:37,43:39,39:80,44:$V5,45:$V6,46:$V7}),{42:141,43:39,44:$V5,45:$V6,46:[1,140],49:142},{46:[1,143]},{43:86,44:$V5,45:$V6,46:[2,93]},o($Vp,[2,94]),{46:[1,144]},{43:86,44:$V5,45:$V6,46:[2,85]},o($Vp,[2,86]),o($Vm,[2,107],{17:29,37:30,38:31,39:32,40:35,41:36,42:37,43:39,35:137,44:$V5,45:$V6,46:$V7,51:$Vq,54:$V9,60:$Va}),o($Vr,[2,111]),o($Vr,[2,112]),o($Vn,[2,118]),{46:[1,145]},{43:86,44:$V5,45:$V6,46:[2,91]},o($Vp,[2,92]),{42:146,43:39,44:$V5,45:$V6},o([16,18,21,24,27,30,44,45,51,53,54,56,58,60,62,64,66],[2,84],{46:[1,147]}),{42:149,43:39,44:$V5,45:$V6,46:[1,148]},{43:86,44:$V5,45:$V6,46:[1,150]},{42:151,43:39,44:$V5,45:$V6},o($Vl,[2,90]),{43:86,44:$V5,45:$V6,46:[1,152]},{46:[1,153]},{43:86,44:$V5,45:$V6,46:[1,154]},{46:[1,155]},o([44,45],$Vs,{46:$Vt}),{46:[1,157]},o($Vp,$Vs),o($Vp,[2,95]),{46:$Vt}],
defaultActions: {3:[2,2],5:[2,121],42:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 18
break;
case 1:
                                        if (yy_.yylloc.first_column) {
                                            return 44               /* '=' anywhere but at the begging becomes just text */
                                        } else {
                                            return 'H'+yy_.yytext.trim().length+'_BEG';
                                        }
                                    
break;
case 2:
                                        if (yy_.yylloc.first_column)
                                            return 51
                                        else
                                            return 53;
                                    
break;
case 3:
                                        this.begin('template'); return 54;
                                    
break;
case 4:
                                        this.popState(); return 56;
                                    
break;
case 5:return 58
break;
case 6:
                                        this.begin('link'); return 60;
                                    
break;
case 7:
                                        this.popState(); return 62;
                                    
break;
case 8:return 64
break;
case 9:return 45
break;
case 10:return 66
break;
case 11:return 44
break;
case 12:return 44
break;
case 13:return 44
break;
}
},
rules: [/^(?:([ \t])*[=]+([ \t])*(\n|$))/,/^(?:([ \t])*[=]{1,5}([ \t])*)/,/^(?:(\r|\n|\n\r|\r\n))/,/^(?:[{][{])/,/^(?:[}][}])/,/^(?:[|])/,/^(?:[[][[])/,/^(?:[\]][\]])/,/^(?:[|])/,/^(?:\\u[0-9a-fA-F]{4})/,/^(?:$)/,/^(?:([^|[\]*#:;<>='{}\n])+)/,/^(?:['])/,/^(?:.)/],
conditions: {"template":{"rules":[0,1,2,3,4,5,6,9,10,11,12,13],"inclusive":true},"link":{"rules":[0,1,2,3,6,7,8,9,10,11,12,13],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,6,9,10,11,12,13],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}