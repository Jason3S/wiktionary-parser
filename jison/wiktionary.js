/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,34],$V2=[1,22],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,33],$V7=[1,26],$V8=[1,5],$V9=[17,41,48,49],$Va=[16,21,24,27,30,49],$Vb=[16,17,21,24,27,30,41,48,49],$Vc=[16,49],$Vd=[16,21,49],$Ve=[16,21,24,49],$Vf=[16,21,24,27,49],$Vg=[16,21,24,27,30,48,49],$Vh=[16,17,21,24,27,30,41,46,48,49],$Vi=[17,41],$Vj=[2,83],$Vk=[1,122];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"wiki-page":3,"article":4,"end-of-file":5,"article-content":6,"paragraphs":7,"sections":8,"section1":9,"section2":10,"section3":11,"section4":12,"section5":13,"section1-title":14,"section1-content":15,"H1_BEG":16,"TEXT":17,"H_END":18,"section2-title":19,"section2-content":20,"H2_BEG":21,"section3-title":22,"section3-content":23,"H3_BEG":24,"section4-title":25,"section4-content":26,"H4_BEG":27,"section5-title":28,"section5-content":29,"H5_BEG":30,"paragraph":31,"blank-line":32,"lines-of-text":33,"line-of-text":34,"text":35,"line-ending":36,"rich-text":37,"plain-text":38,"bold-text":39,"italic-text":40,"S_QUOTE":41,"italic-text-inner-text":42,"bold-text-inner":43,"italic-text-inner":44,"bold-text-inner-text":45,"NEWLINE":46,"blank-lines":47,"EMPTY_LINE":48,"EOF":49,"$accept":0,"$end":1},
terminals_: {2:"error",16:"H1_BEG",17:"TEXT",18:"H_END",21:"H2_BEG",24:"H3_BEG",27:"H4_BEG",30:"H5_BEG",41:"S_QUOTE",46:"NEWLINE",48:"EMPTY_LINE",49:"EOF"},
productions_: [0,[3,2],[3,1],[4,1],[6,2],[6,2],[6,1],[6,1],[8,2],[8,2],[8,2],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[9,2],[9,1],[14,3],[15,2],[15,2],[15,2],[15,2],[15,2],[15,1],[15,1],[15,1],[15,1],[15,1],[10,2],[10,1],[19,3],[20,2],[20,2],[20,2],[20,2],[20,1],[20,1],[20,1],[20,1],[11,2],[11,1],[22,3],[23,2],[23,2],[23,2],[23,1],[23,1],[23,1],[12,2],[12,1],[25,3],[26,2],[26,2],[26,1],[26,1],[13,2],[13,1],[28,3],[29,2],[29,1],[7,2],[7,1],[31,2],[31,1],[31,1],[33,2],[33,1],[34,2],[34,1],[35,2],[35,1],[38,1],[37,1],[37,1],[37,1],[40,5],[42,2],[42,2],[42,1],[42,1],[44,5],[39,7],[45,2],[45,2],[45,1],[45,1],[43,7],[36,1],[47,2],[47,1],[32,1],[5,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {t: 'wiki-page', c:[$$[$0-1]]};
break;
case 2:
 return {t: 'wiki-page', c:[]};
break;
case 3:
 this.$ = $$[$0]; 
break;
case 4: case 5: case 8: case 9: case 10: case 11: case 12: case 21: case 22: case 23: case 24: case 25: case 34: case 35: case 36: case 37: case 45: case 46: case 47: case 54: case 55: case 61: case 63: case 68: case 72: case 79: case 80: case 85: case 86: case 91:
 $$[$0-1].c.push($$[$0]); this.$ = $$[$0-1]; 
break;
case 6: case 7:
 this.$ = {t: 'article', c:[$$[$0]]};
break;
case 13: case 14: case 15: case 16: case 17:
 this.$ = {t: 'sections', c:[$$[$0]]}; 
break;
case 18:
 this.$ = {t: 'section1', c:[$$[$0-1], $$[$0]]}; 
break;
case 19:
 this.$ = {t: 'section1', c:[$$[$0]]}; 
break;
case 20:
 this.$ = {t: 'section1-title', c:[$$[$0-1]]}; 
break;
case 26: case 27: case 28: case 29: case 30:
 this.$ = {t: 'section1-content', c:[$$[$0]]}; 
break;
case 31:
 this.$ = {t: 'section2', c:[$$[$0-1], $$[$0]]}; 
break;
case 32:
 this.$ = {t: 'section2', c:[$$[$0]]}; 
break;
case 33:
 this.$ = {t: 'section2-title', c:[$$[$0-1]]}; 
break;
case 38: case 39: case 40: case 41:
 this.$ = {t: 'section2-content', c:[$$[$0]]}; 
break;
case 42:
 this.$ = {t: 'section3', c:[$$[$0-1], $$[$0]]}; 
break;
case 43:
 this.$ = {t: 'section3', c:[$$[$0]]}; 
break;
case 44:
 this.$ = {t: 'section3-title', c:[$$[$0-1]]}; 
break;
case 48: case 49: case 50:
 this.$ = {t: 'section3-content', c:[$$[$0]]}; 
break;
case 51:
 this.$ = {t: 'section4', c:[$$[$0-1], $$[$0]]}; 
break;
case 52:
 this.$ = {t: 'section4', c:[$$[$0]]}; 
break;
case 53:
 this.$ = {t: 'section4-title', c:[$$[$0-1]]}; 
break;
case 56: case 57:
 this.$ = {t: 'section4-content', c:[$$[$0]]}; 
break;
case 58:
 this.$ = {t: 'section5', c:[$$[$0-1], $$[$0]]}; 
break;
case 59:
 this.$ = {t: 'section5', c:[$$[$0]]}; 
break;
case 60:
 this.$ = {t: 'section5-title', c:[$$[$0-1]]}; 
break;
case 62:
 this.$ = {t: 'section5-content', c:[$$[$0]]}; 
break;
case 64:
 this.$ = {t: 'paragraphs', c:[$$[$0]]};
break;
case 65:
 this.$ = {t: 'paragraph', c:[$$[$0-1], $$[$0]]};
break;
case 66: case 67:
 this.$ = {t: 'paragraph', c:[$$[$0]]};
break;
case 69:
 this.$ = {t: 'lines-of-text', c:[$$[$0]]}; 
break;
case 70:
 this.$ = {t: 'line-of-text', c:[$$[$0-1], $$[$0]]}; 
break;
case 71:
 this.$ = {t: 'line-of-text', c:[$$[$0]]}; 
break;
case 73:
 this.$ = {t: 'text', c:[$$[$0]]}; 
break;
case 74:
 this.$ = {t: 'plain-text', v: $$[$0]}; 
break;
case 75: case 76: case 77:
 this.$ = {t: 'rich-text', v: $$[$0]}; 
break;
case 78:
 this.$ = {t: 'italic-text', c: $$[$0-2].c}; 
break;
case 81: case 82:
 this.$ = {t: 'italic-text-inner', c: [$$[$0]]}; 
break;
case 83:
 this.$ = {t: 'italic-text', c: [$$[$0-2]]}; 
break;
case 84:
 this.$ = {t: 'bold-text', c: $$[$0-3].c}; 
break;
case 87: case 88:
 this.$ = {t: 'bold-text-inner', c: [$$[$0]]}; 
break;
case 89:
 this.$ = {t: 'bold-text', c: [$$[$0-3]]}; 
break;
case 90:
 this.$ = {t: 'line-end'};
break;
case 92:
 this.$ = {t: 'blank-lines', c: [$$[$0]]};
break;
case 93:
 this.$ = {t: 'blank-line'};
break;
case 94:
 this.$ = {t: 'eof'};
break;
}
},
table: [{3:1,4:2,5:3,6:4,7:7,8:6,9:8,10:9,11:10,12:11,13:12,14:14,16:$V0,17:$V1,19:15,21:$V2,22:16,24:$V3,25:17,27:$V4,28:18,30:$V5,31:13,32:19,33:20,34:27,35:28,37:29,38:32,39:30,40:31,41:$V6,48:$V7,49:$V8},{1:[3]},{5:35,49:$V8},{1:[2,2]},{7:36,8:37,9:8,10:9,11:10,12:11,13:12,14:14,16:$V0,17:$V1,19:15,21:$V2,22:16,24:$V3,25:17,27:$V4,28:18,30:$V5,31:13,32:19,33:20,34:27,35:28,37:29,38:32,39:30,40:31,41:$V6,48:$V7,49:[2,3]},{1:[2,94]},o($V9,[2,6],{14:14,19:15,22:16,25:17,28:18,9:38,10:39,11:40,12:41,13:42,16:$V0,21:$V2,24:$V3,27:$V4,30:$V5}),o($Va,[2,7],{32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,31:43,17:$V1,41:$V6,48:$V7}),o($Vb,[2,13]),o($Vb,[2,14]),o($Vb,[2,15]),o($Vb,[2,16]),o($Vb,[2,17]),o($Vb,[2,64]),o($Vc,[2,19],{31:13,19:15,22:16,25:17,28:18,32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,15:44,7:45,10:46,11:47,12:48,13:49,17:$V1,21:$V2,24:$V3,27:$V4,30:$V5,41:$V6,48:$V7}),o($Vd,[2,32],{31:13,22:16,25:17,28:18,32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,20:50,7:51,11:52,12:53,13:54,17:$V1,24:$V3,27:$V4,30:$V5,41:$V6,48:$V7}),o($Ve,[2,43],{31:13,25:17,28:18,32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,23:55,7:56,12:57,13:58,17:$V1,27:$V4,30:$V5,41:$V6,48:$V7}),o($Vf,[2,52],{31:13,28:18,32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,26:59,7:60,13:61,17:$V1,30:$V5,41:$V6,48:$V7}),o($Va,[2,59],{31:13,32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,29:62,7:63,17:$V1,41:$V6,48:$V7}),o($Vg,[2,67],{34:27,35:28,37:29,39:30,40:31,38:32,33:64,17:$V1,41:$V6}),o($Vg,[2,66],{35:28,37:29,39:30,40:31,38:32,34:65,17:$V1,41:$V6}),{17:[1,66]},{17:[1,67]},{17:[1,68]},{17:[1,69]},{17:[1,70]},o($Vb,[2,93]),o($Vb,[2,69]),o($Vg,[2,71],{39:30,40:31,38:32,36:71,37:72,17:$V1,41:$V6,46:[1,73]}),o($Vh,[2,73]),o($Vh,[2,75]),o($Vh,[2,76]),o($Vh,[2,77]),{41:[1,74]},o($Vh,[2,74]),{1:[2,1]},o($Va,[2,4],{32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,31:43,17:$V1,41:$V6,48:$V7}),o($V9,[2,5],{14:14,19:15,22:16,25:17,28:18,9:38,10:39,11:40,12:41,13:42,16:$V0,21:$V2,24:$V3,27:$V4,30:$V5}),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,63]),o($Vc,[2,18],{31:13,19:15,22:16,25:17,28:18,32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,7:75,10:76,11:77,12:78,13:79,17:$V1,21:$V2,24:$V3,27:$V4,30:$V5,41:$V6,48:$V7}),o($Va,[2,26],{32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,31:43,17:$V1,41:$V6,48:$V7}),o($Vb,[2,27]),o($Vb,[2,28]),o($Vb,[2,29]),o($Vb,[2,30]),o($Vd,[2,31],{31:13,22:16,25:17,28:18,32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,7:80,11:81,12:82,13:83,17:$V1,24:$V3,27:$V4,30:$V5,41:$V6,48:$V7}),o($Va,[2,38],{32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,31:43,17:$V1,41:$V6,48:$V7}),o($Vb,[2,39]),o($Vb,[2,40]),o($Vb,[2,41]),o($Ve,[2,42],{31:13,25:17,28:18,32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,7:84,12:85,13:86,17:$V1,27:$V4,30:$V5,41:$V6,48:$V7}),o($Va,[2,48],{32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,31:43,17:$V1,41:$V6,48:$V7}),o($Vb,[2,49]),o($Vb,[2,50]),o($Vf,[2,51],{31:13,28:18,32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,7:87,13:88,17:$V1,30:$V5,41:$V6,48:$V7}),o($Va,[2,56],{32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,31:43,17:$V1,41:$V6,48:$V7}),o($Vb,[2,57]),o($Va,[2,58],{31:13,32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,7:89,17:$V1,41:$V6,48:$V7}),o($Va,[2,62],{32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,31:43,17:$V1,41:$V6,48:$V7}),o($Vg,[2,65],{35:28,37:29,39:30,40:31,38:32,34:65,17:$V1,41:$V6}),o($Vb,[2,68]),{18:[1,90]},{18:[1,91]},{18:[1,92]},{18:[1,93]},{18:[1,94]},o($Vb,[2,70]),o($Vh,[2,72]),o($Vb,[2,90]),{17:$V1,38:97,41:[1,95],42:96,43:98},o($Va,[2,21],{32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,31:43,17:$V1,41:$V6,48:$V7}),o($Vb,[2,22]),o($Vb,[2,23]),o($Vb,[2,24]),o($Vb,[2,25]),o($Va,[2,34],{32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,31:43,17:$V1,41:$V6,48:$V7}),o($Vb,[2,35]),o($Vb,[2,36]),o($Vb,[2,37]),o($Va,[2,45],{32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,31:43,17:$V1,41:$V6,48:$V7}),o($Vb,[2,46]),o($Vb,[2,47]),o($Va,[2,54],{32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,31:43,17:$V1,41:$V6,48:$V7}),o($Vb,[2,55]),o($Va,[2,61],{32:19,33:20,34:27,35:28,37:29,39:30,40:31,38:32,31:43,17:$V1,41:$V6,48:$V7}),o($Vb,[2,20]),o($Vb,[2,33]),o($Vb,[2,44]),o($Vb,[2,53]),o($Vb,[2,60]),{17:$V1,38:101,41:[1,100],44:102,45:99},{17:$V1,38:104,41:[1,103],43:105},o($Vi,[2,81]),o($Vi,[2,82]),{17:$V1,38:107,41:[1,106],44:108},{41:[1,109]},o($Vi,[2,87]),o($Vi,[2,88]),{41:[1,110]},o($Vi,[2,79]),o($Vi,[2,80]),{41:[1,111]},o($Vi,[2,85]),o($Vi,[2,86]),{17:$V1,38:112},o([16,17,21,24,27,30,46,48,49],[2,78],{41:[1,113]}),{17:$V1,38:115,41:[1,114]},{41:[1,116]},{17:$V1,38:117},o($Vh,[2,84]),{41:[1,118]},{41:[1,119]},{41:[1,120]},{41:[1,121]},{17:$Vj,41:$Vk},{41:[1,123]},o($Vi,$Vj),o($Vi,[2,89]),{41:$Vk}],
defaultActions: {3:[2,2],5:[2,94],35:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                        if (yy_.yylloc.first_column)
                                            return 46
                                        else
                                            return 48;
                                    
break;
case 1:return 17
break;
case 2:return 18
break;
case 3:
                                        if (yy_.yylloc.first_column) {
                                            return 17               /* '=' anywhere but at the begging becomes just text */
                                        } else {
                                            return 'H'+yy_.yytext.trim().length+'_BEG';
                                        }
                                    
break;
case 4:return 41
break;
case 5:return 49
break;
case 6:return 'INVALID'
break;
case 7:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(\r|\n|\n\r|\r\n))/,/^(?:([^|[\]*#:;<>='{}\n])+)/,/^(?:([ \t])*[=]+([ \t])*(\n|$))/,/^(?:([ \t])*[=]{1,5}([ \t])*)/,/^(?:['])/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}