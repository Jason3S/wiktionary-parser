/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var wiktionary = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,26],$V2=[1,27],$V3=[1,28],$V4=[1,29],$V5=[1,59],$V6=[1,60],$V7=[1,61],$V8=[1,56],$V9=[1,57],$Va=[1,55],$Vb=[1,51],$Vc=[1,33],$Vd=[1,40],$Ve=[1,41],$Vf=[1,21],$Vg=[1,22],$Vh=[1,23],$Vi=[1,24],$Vj=[1,52],$Vk=[1,53],$Vl=[1,54],$Vm=[1,5],$Vn=[55,56,57,67,69,71,72,76,77,84,91,94,96,98,102,104,106,108],$Vo=[18,24,28,32,36,55,56,57,67,69,71,72,76,77,84,91,94,96,98,102,104,106,108],$Vp=[18,108],$Vq=[18,24,108],$Vr=[18,24,28,108],$Vs=[18,24,28,32,108],$Vt=[18,24,28,32,36,108],$Vu=[1,98],$Vv=[18,24,28,32,36,76,91,94,96,98,108],$Vw=[1,111],$Vx=[18,24,28,32,36,55,56,57,67,69,71,72,74,76,77,84,91,93,94,95,96,97,98,99,101,102,103,104,105,106,108],$Vy=[18,24,28,32,36,55,56,57,67,69,71,72,74,76,77,79,81,84,91,93,94,95,96,97,98,99,101,102,103,104,105,106,108],$Vz=[18,20,24,28,32,36,55,56,57,67,69,71,72,74,76,77,79,81,84,86,88,91,93,94,95,96,97,98,99,101,102,103,104,105,106,108],$VA=[18,20,24,28,32,36,55,56,57,67,69,71,72,74,76,77,79,81,84,86,88,91,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108],$VB=[1,136],$VC=[1,141],$VD=[1,142],$VE=[18,20,24,28,32,36,55,56,57,67,69,71,72,73,74,76,77,79,81,84,86,88,91,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108],$VF=[93,95,97,99,101],$VG=[18,24,28,32,36,55,56,57,67,69,71,72,76,77,84,91,93,94,95,96,97,98,99,101,102,104,106,108],$VH=[79,81],$VI=[86,88],$VJ=[55,56,57,67,69,71,72,77,84,102,104],$VK=[55,56,57,67,69,72,77,84,102,104],$VL=[91,93,94,95,96,97,98,99,101],$VM=[1,198],$VN=[1,199],$VO=[55,56,57,67,69,71,72,74,76,77,79,81,84,102,104,106];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"wiki-page":3,"article":4,"end-of-file":5,"article-content":6,"sections":7,"general-content":8,"paragraphs":9,"list":10,"section1":11,"section2":12,"section3":13,"section4":14,"section5":15,"section1-title":16,"section1-content":17,"H1_BEG":18,"text":19,"H_END":20,"section1-content-item":21,"section2-title":22,"section2-content":23,"H2_BEG":24,"section2-content-item":25,"section3-title":26,"section3-content":27,"H3_BEG":28,"section3-content-item":29,"section4-title":30,"section4-content":31,"H4_BEG":32,"section4-content-item":33,"section5-title":34,"section5-content":35,"H5_BEG":36,"section5-content-item":37,"paragraph":38,"lines-of-text":39,"blank-line":40,"line-of-text":41,"text-content":42,"line-ending":43,"text-content-item":44,"template":45,"link":46,"rich-text":47,"bold-italics-text":48,"plain-text":49,"no-wiki":50,"simple-html":51,"comment":52,"text-constant":53,"raw-text":54,"UNICODE":55,"HTML_ENTITY":56,"TEXT":57,"bold-italics-content":58,"bold-italics-content-item":59,"bold-content":60,"bold-content-item":61,"italic-text-nested":62,"italics-content":63,"italics-content-item":64,"bold-text-nested":65,"italic-text":66,"ITALICS":67,"bold-text":68,"BOLD":69,"bold-italics-mix":70,"BOLD_ITALICS":71,"NO_WIKI_START":72,"NO_WIKI_END":73,"NEWLINE":74,"blank-lines":75,"EMPTY_LINE":76,"TEMPLATE_START":77,"template-name":78,"TEMPLATE_END":79,"template-params":80,"TEMPLATE_PARAM_SEPARATOR":81,"template-param":82,"template-param-content":83,"LINK_START":84,"link-ref":85,"LINK_END":86,"link-params":87,"LINK_PARAM_SEPARATOR":88,"link-param":89,"lists":90,"OL":91,"list-items":92,"OL_E":93,"UL":94,"UL_E":95,"DL":96,"DL_E":97,"INDENT":98,"INDENT_E":99,"list-item":100,"LI":101,"SUP":102,"SUP_E":103,"SUB":104,"SUB_E":105,"COMMENT_START":106,"COMMENT_END":107,"EOF":108,"$accept":0,"$end":1},
terminals_: {2:"error",18:"H1_BEG",20:"H_END",24:"H2_BEG",28:"H3_BEG",32:"H4_BEG",36:"H5_BEG",55:"UNICODE",56:"HTML_ENTITY",57:"TEXT",67:"ITALICS",69:"BOLD",71:"BOLD_ITALICS",72:"NO_WIKI_START",73:"NO_WIKI_END",74:"NEWLINE",76:"EMPTY_LINE",77:"TEMPLATE_START",79:"TEMPLATE_END",81:"TEMPLATE_PARAM_SEPARATOR",84:"LINK_START",86:"LINK_END",88:"LINK_PARAM_SEPARATOR",91:"OL",93:"OL_E",94:"UL",95:"UL_E",96:"DL",97:"DL_E",98:"INDENT",99:"INDENT_E",101:"LI",102:"SUP",103:"SUP_E",104:"SUB",105:"SUB_E",106:"COMMENT_START",107:"COMMENT_END",108:"EOF"},
productions_: [0,[3,2],[3,1],[4,1],[6,1],[6,1],[6,2],[6,2],[8,1],[8,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[7,2],[11,2],[11,1],[16,3],[17,1],[17,2],[21,1],[21,1],[21,1],[21,1],[21,1],[12,2],[12,1],[22,3],[23,1],[23,2],[25,1],[25,1],[25,1],[25,1],[13,2],[13,1],[26,3],[27,1],[27,2],[29,1],[29,1],[29,1],[14,2],[14,1],[30,3],[31,1],[31,2],[33,1],[33,1],[15,2],[15,1],[34,3],[35,1],[35,2],[37,1],[9,1],[9,2],[38,1],[38,1],[38,2],[39,2],[39,1],[41,2],[41,1],[42,1],[42,2],[44,1],[44,1],[44,1],[19,1],[19,2],[47,1],[47,1],[47,1],[47,1],[47,1],[49,1],[49,2],[53,1],[53,1],[53,1],[54,1],[54,2],[58,1],[58,2],[59,1],[59,1],[59,1],[59,1],[59,1],[60,1],[60,2],[61,1],[61,1],[63,1],[63,2],[64,1],[64,1],[66,3],[68,3],[62,3],[65,3],[70,3],[70,7],[70,7],[70,5],[70,5],[48,1],[48,1],[48,1],[50,3],[43,1],[75,2],[75,1],[40,1],[45,3],[45,4],[78,1],[78,2],[78,2],[80,2],[80,1],[80,3],[80,2],[82,1],[82,2],[83,1],[83,1],[83,1],[46,3],[46,4],[85,1],[87,2],[87,1],[87,3],[87,2],[89,1],[90,1],[90,2],[10,3],[10,3],[10,3],[10,3],[92,1],[92,2],[100,2],[100,3],[100,2],[51,3],[51,2],[51,3],[51,2],[52,3],[5,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {t: 'wiki-page', c:[$$[$0-1], $$[$0]]};
break;
case 2:
 return {t: 'wiki-page', c:[$$[$0]]};
break;
case 3: case 136: case 141:
 this.$ = $$[$0]; 
break;
case 4: case 5:
 this.$ = {t: 'article', c:[$$[$0]]};
break;
case 6: case 7: case 15: case 16: case 17: case 18: case 19: case 24: case 34: case 43: case 51: case 58: case 61: case 65: case 75: case 117: case 130:
 $$[$0-1].c.push($$[$0]); this.$ = $$[$0-1]; 
break;
case 10: case 11: case 12: case 13: case 14:
 this.$ = {t: 'sections', c:[$$[$0]]}; 
break;
case 20:
 this.$ = {t: 'section1', c:[$$[$0-1], $$[$0]]}; 
break;
case 21:
 this.$ = {t: 'section1', c:[$$[$0]]}; 
break;
case 22:
 this.$ = {t: 'section1-title', c:[$$[$0-1]]}; 
break;
case 23:
 this.$ = {t: 'section1-content', c:[$$[$0]]}; 
break;
case 30:
 this.$ = {t: 'section2', c:[$$[$0-1], $$[$0]]}; 
break;
case 31:
 this.$ = {t: 'section2', c:[$$[$0]]}; 
break;
case 32:
 this.$ = {t: 'section2-title', c:[$$[$0-1]]}; 
break;
case 33:
 this.$ = {t: 'section2-content', c:[$$[$0]]}; 
break;
case 39:
 this.$ = {t: 'section3', c:[$$[$0-1], $$[$0]]}; 
break;
case 40:
 this.$ = {t: 'section3', c:[$$[$0]]}; 
break;
case 41:
 this.$ = {t: 'section3-title', c:[$$[$0-1]]}; 
break;
case 42:
 this.$ = {t: 'section3-content', c:[$$[$0]]}; 
break;
case 47:
 this.$ = {t: 'section4', c:[$$[$0-1], $$[$0]]}; 
break;
case 48:
 this.$ = {t: 'section4', c:[$$[$0]]}; 
break;
case 49:
 this.$ = {t: 'section4-title', c:[$$[$0-1]]}; 
break;
case 50:
 this.$ = {t: 'section4-content', c:[$$[$0]]}; 
break;
case 54:
 this.$ = {t: 'section5', c:[$$[$0-1], $$[$0]]}; 
break;
case 55:
 this.$ = {t: 'section5', c:[$$[$0]]}; 
break;
case 56:
 this.$ = {t: 'section5-title', c:[$$[$0-1]]}; 
break;
case 57:
 this.$ = {t: 'section5-content', c:[$$[$0]]}; 
break;
case 60:
 this.$ = {t: 'paragraphs', c:[$$[$0]]};
break;
case 62: case 63:
 this.$ = {t: 'paragraph', c:[$$[$0]]};
break;
case 64:
 this.$ = {t: 'paragraph', c:[$$[$0-1], $$[$0]]};
break;
case 66:
 this.$ = {t: 'lines-of-text', c:[$$[$0]]}; 
break;
case 67:
 this.$ = {t: 'line-of-text', c: $$[$0-1].concat([$$[$0]])}; 
break;
case 68:
 this.$ = {t: 'line-of-text', c: $$[$0]}; 
break;
case 69: case 125: case 137: case 142: case 148:
 this.$ = [$$[$0]]; 
break;
case 70: case 89: case 96: case 100: case 143: case 149:
 this.$ = $$[$0-1].concat([$$[$0]]); 
break;
case 74:
 this.$ = {t: 'text', c: [$$[$0]]}; 
break;
case 81:
 this.$ = {t: 'plain-text', v: $$[$0]}; 
break;
case 82:
 $$[$0-1].v += $$[$0]; this.$ = $$[$0-1]; 
break;
case 83: case 86:
 this.$ = $$[$0] 
break;
case 84:
 this.$ = JSON.parse('"'+$$[$0]+'"'); 
break;
case 85:
 this.$ = html_entities.decode($$[$0]); 
break;
case 87:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 88: case 95: case 99:
 this.$ = [$$[$0]] 
break;
case 103: case 105:
 this.$ = {t: 'italic-text', c: $$[$0-1]}; 
break;
case 104: case 106:
 this.$ = {t: 'bold-text', c: $$[$0-1]}; 
break;
case 107:
 this.$ = {t: 'bold-text', c: [{t: 'italic-text', c: $$[$0-1]}]}; 
break;
case 108:
 this.$ = {t: 'bold-text', c: [{t: 'italic-text', c: $$[$0-5]}].concat($$[$0-3],[{t: 'italic-text', c: $$[$0-1]}])}; 
break;
case 109:
 this.$ = {t: 'italic-text', c: [{t: 'bold-text', c: $$[$0-5]}].concat($$[$0-3],[{t: 'bold-text', c: $$[$0-1]}])}; 
break;
case 110:
 this.$ = {t: 'bold-text', c: [{t: 'italic-text', c: $$[$0-3]}].concat($$[$0-1])}; 
break;
case 111:
 this.$ = {t: 'italic-text', c: [{t: 'bold-text', c: $$[$0-3]}].concat($$[$0-1])}; 
break;
case 115:
 this.$ = {t: 'no-wiki', c: [{t: 'plain-text', v: $$[$0-1] }]}; 
break;
case 116:
 this.$ = {t: 'line-end', v: $$[$0]};
break;
case 118:
 this.$ = {t: 'blank-lines', c: [$$[$0]]};
break;
case 119:
 this.$ = {t: 'blank-line', v: $$[$0]};
break;
case 120:
 this.$ = {t: 'template', c: [$$[$0-1]]}; 
break;
case 121:
 this.$ = {t: 'template', c: [$$[$0-2]].concat($$[$0-1]) }; 
break;
case 122: case 123:
 this.$ = {t: 'template-name', c: [$$[$0]] }; 
break;
case 124:
 this.$ = {t: 'template-name', c: [$$[$0-1]] }; 
break;
case 126: case 138:
 this.$ = [null]; 
break;
case 127: case 139:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 128: case 140:
 $$[$0-1].push(null); this.$ = $$[$0-1]; 
break;
case 129:
 this.$ = {t: 'template-param', c: [$$[$0]] }; 
break;
case 134:
 this.$ = {t: 'link', c:[$$[$0-1]] }; 
break;
case 135:
 this.$ = {t: 'link', c: [$$[$0-2]].concat($$[$0-1]) }; 
break;
case 144:
 this.$ = {t:'ordered-list', c: $$[$0-1]}; 
break;
case 145: case 146:
 this.$ = {t:'unordered-list', c: $$[$0-1]}; 
break;
case 147:
 this.$ = {t:'indented-list', c: $$[$0-1]}; 
break;
case 150:
 this.$ = {t: 'list-item', c: [$$[$0]]}; 
break;
case 151:
 this.$ = {t: 'list-item', c: [$$[$0-1]].concat($$[$0])}; 
break;
case 152:
 this.$ = {t: 'list-item', c: $$[$0]}; 
break;
case 153:
 this.$ = {t: 'sup', c: $$[$0-1] }; 
break;
case 154:
 this.$ = {t: 'sup', c: [] }; 
break;
case 155:
 this.$ = {t: 'sub', c: $$[$0-1] }; 
break;
case 156:
 this.$ = {t: 'sub', c: [] }; 
break;
case 157:
 this.$ = {t: 'comment', c: [$$[$0-1]] }; 
break;
case 158:
 this.$ = {t: 'eof'};
break;
}
},
table: [{3:1,4:2,5:3,6:4,7:6,8:7,9:13,10:14,11:8,12:9,13:10,14:11,15:12,16:15,18:$V0,19:36,22:16,24:$V1,26:17,28:$V2,30:18,32:$V3,34:19,36:$V4,38:20,39:30,40:31,41:32,42:34,44:35,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl,108:$Vm},{1:[3]},{5:62,108:$Vm},{1:[2,2]},{7:64,8:63,9:13,10:14,11:8,12:9,13:10,14:11,15:12,16:15,18:$V0,19:36,22:16,24:$V1,26:17,28:$V2,30:18,32:$V3,34:19,36:$V4,38:20,39:30,40:31,41:32,42:34,44:35,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl,108:[2,3]},{1:[2,158]},o($Vn,[2,4],{16:15,22:16,26:17,30:18,34:19,11:65,12:66,13:67,14:68,15:69,18:$V0,24:$V1,28:$V2,32:$V3,36:$V4}),o($Vo,[2,5]),o($Vo,[2,10]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),o([18,24,28,32,36,91,94,96,98,108],[2,8],{39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,38:70,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,102:$Vj,104:$Vk,106:$Vl}),o($Vo,[2,9]),o($Vp,[2,21],{9:13,10:14,22:16,26:17,30:18,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,17:71,21:72,8:73,12:74,13:75,14:76,15:77,24:$V1,28:$V2,32:$V3,36:$V4,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl}),o($Vq,[2,31],{9:13,10:14,26:17,30:18,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,23:78,25:79,8:80,13:81,14:82,15:83,28:$V2,32:$V3,36:$V4,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl}),o($Vr,[2,40],{9:13,10:14,30:18,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,27:84,29:85,8:86,14:87,15:88,32:$V3,36:$V4,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl}),o($Vs,[2,48],{9:13,10:14,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,31:89,33:90,8:91,15:92,36:$V4,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl}),o($Vt,[2,55],{9:13,10:14,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,35:93,37:94,8:95,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl}),o($Vo,[2,60]),{92:96,100:97,101:$Vu},{92:99,100:97,101:$Vu},{92:100,100:97,101:$Vu},{92:101,100:97,101:$Vu},{19:102,47:39,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl},{19:103,47:39,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl},{19:104,47:39,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl},{19:105,47:39,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl},{19:106,47:39,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl},o($Vv,[2,62],{42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,41:107,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk,106:$Vl}),o($Vv,[2,63],{41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,39:108,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk,106:$Vl}),o($Vo,[2,66]),o([18,24,28,32,36,55,56,57,67,69,71,72,74,76,77,79,81,84,91,94,96,98,102,104,106,108],[2,119]),o([18,24,28,32,36,76,91,93,94,95,96,97,98,99,101,108],[2,68],{19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,43:109,44:110,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,74:$Vw,77:$Vd,84:$Ve,102:$Vj,104:$Vk,106:$Vl}),o($Vx,[2,69]),o([18,24,28,32,36,74,76,77,79,81,84,91,93,94,95,96,97,98,99,101,103,105,108],[2,71],{48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,47:112,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl}),o($Vy,[2,72]),o($Vy,[2,73]),o($Vz,[2,74]),{49:114,53:50,54:58,55:$V5,56:$V6,57:$V7,74:[1,115],78:113},{49:117,53:50,54:58,55:$V5,56:$V6,57:$V7,85:116},o($Vz,[2,76]),o([18,20,24,28,32,36,67,69,71,72,74,76,77,79,81,84,86,88,91,93,94,95,96,97,98,99,101,102,103,104,105,106,108],[2,77],{54:58,53:118,55:$V5,56:$V6,57:$V7}),o($Vz,[2,78]),o($Vz,[2,79]),o($Vz,[2,80]),o($Vz,[2,112]),o($Vz,[2,113]),o($Vz,[2,114]),o($VA,[2,81]),{54:119,57:$V7},{19:36,42:120,44:35,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,77:$Vd,84:$Ve,102:$Vj,103:[1,121],104:$Vk,106:$Vl},{19:36,42:122,44:35,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk,105:[1,123],106:$Vl},{49:124,53:50,54:58,55:$V5,56:$V6,57:$V7},{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,58:125,59:126,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:134,63:132,64:133,65:135,69:$VB,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:139,60:137,61:138,62:140,67:$VC,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},o([18,20,24,28,32,36,55,56,67,69,71,72,74,76,77,79,81,84,86,88,91,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108],[2,83],{57:$VD}),o($VA,[2,84]),o($VA,[2,85]),o($VE,[2,86]),{1:[2,1]},o($Vo,[2,6]),o($Vn,[2,7],{16:15,22:16,26:17,30:18,34:19,11:65,12:66,13:67,14:68,15:69,18:$V0,24:$V1,28:$V2,32:$V3,36:$V4}),o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,[2,18]),o($Vo,[2,19]),o($Vo,[2,61]),o($Vp,[2,20],{9:13,10:14,22:16,26:17,30:18,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,8:73,12:74,13:75,14:76,15:77,21:143,24:$V1,28:$V2,32:$V3,36:$V4,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl}),o($Vo,[2,23]),o($Vo,[2,25]),o($Vo,[2,26]),o($Vo,[2,27]),o($Vo,[2,28]),o($Vo,[2,29]),o($Vq,[2,30],{9:13,10:14,26:17,30:18,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,8:80,13:81,14:82,15:83,25:144,28:$V2,32:$V3,36:$V4,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl}),o($Vo,[2,33]),o($Vo,[2,35]),o($Vo,[2,36]),o($Vo,[2,37]),o($Vo,[2,38]),o($Vr,[2,39],{9:13,10:14,30:18,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,8:86,14:87,15:88,29:145,32:$V3,36:$V4,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl}),o($Vo,[2,42]),o($Vo,[2,44]),o($Vo,[2,45]),o($Vo,[2,46]),o($Vs,[2,47],{9:13,10:14,34:19,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,8:91,15:92,33:146,36:$V4,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl}),o($Vo,[2,50]),o($Vo,[2,52]),o($Vo,[2,53]),o($Vt,[2,54],{9:13,10:14,38:20,39:30,40:31,41:32,42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,8:95,37:147,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,76:$Vc,77:$Vd,84:$Ve,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl}),o($Vo,[2,57]),o($Vo,[2,59]),{93:[1,148],100:149,101:$Vu},o($VF,[2,148]),{10:152,19:36,41:150,42:34,44:35,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,77:$Vd,84:$Ve,90:151,91:$Vf,94:$Vg,96:$Vh,98:$Vi,102:$Vj,104:$Vk,106:$Vl},{95:[1,153],100:149,101:$Vu},{97:[1,154],100:149,101:$Vu},{99:[1,155],100:149,101:$Vu},{20:[1,156],47:112,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl},{20:[1,157],47:112,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl},{20:[1,158],47:112,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl},{20:[1,159],47:112,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl},{20:[1,160],47:112,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl},o($Vo,[2,65]),o($Vv,[2,64],{42:34,44:35,19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,41:107,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk,106:$Vl}),o($VG,[2,67]),o($Vx,[2,70]),o([18,24,28,32,36,55,56,57,67,69,71,72,74,76,77,79,81,84,91,93,94,95,96,97,98,99,101,102,104,106,108],[2,116]),o($Vz,[2,75]),{79:[1,161],80:162,81:[1,163]},o($VH,[2,122],{54:58,53:118,55:$V5,56:$V6,57:$V7,74:[1,164]}),{49:165,53:50,54:58,55:$V5,56:$V6,57:$V7},{86:[1,166],87:167,88:[1,168]},o($VI,[2,136],{54:58,53:118,55:$V5,56:$V6,57:$V7}),o($VA,[2,82]),{57:$VD,73:[1,169]},{19:36,44:110,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,77:$Vd,84:$Ve,102:$Vj,103:[1,170],104:$Vk,106:$Vl},o($Vz,[2,154]),{19:36,44:110,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,53:50,54:58,55:$V5,56:$V6,57:$V7,66:48,67:$V8,68:49,69:$V9,70:47,71:$Va,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk,105:[1,171],106:$Vl},o($Vz,[2,156]),{53:118,54:58,55:$V5,56:$V6,57:$V7,107:[1,172]},{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:176,67:[1,174],69:[1,175],71:[1,173],72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},o($VJ,[2,88]),o([67,69,71,72,77,84,102,104],[2,90],{54:58,53:118,55:$V5,56:$V6,57:$V7}),o($VJ,[2,91]),o($VJ,[2,92]),o($VJ,[2,93]),o($VJ,[2,94]),{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:134,64:178,65:135,67:[1,177],69:$VB,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},o($VK,[2,99]),o($VK,[2,101]),o($VK,[2,102]),{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,58:179,59:126,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:139,61:181,62:140,67:$VC,69:[1,180],72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},o($VK,[2,95]),o($VK,[2,97]),o($VK,[2,98]),{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,58:182,59:126,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},o($VE,[2,87]),o($Vo,[2,24]),o($Vo,[2,34]),o($Vo,[2,43]),o($Vo,[2,51]),o($Vo,[2,58]),o($VG,[2,144]),o($VF,[2,149]),o($VF,[2,150],{10:152,90:183,91:$Vf,94:$Vg,96:$Vh,98:$Vi}),o($VF,[2,152],{10:184,91:$Vf,94:$Vg,96:$Vh,98:$Vi}),o($VL,[2,142]),o($VG,[2,145]),o($VG,[2,146]),o($VG,[2,147]),o($Vo,[2,22]),o($Vo,[2,32]),o($Vo,[2,41]),o($Vo,[2,49]),o($Vo,[2,56]),o($Vy,[2,120]),{79:[1,185],81:[1,186]},o($VH,[2,126],{19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,82:187,83:188,44:189,43:190,40:191,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,74:$Vw,76:$Vc,77:$Vd,84:$Ve,102:$Vj,104:$Vk,106:$Vl}),o($VH,[2,124]),o($VH,[2,123],{54:58,53:118,55:$V5,56:$V6,57:$V7}),o($Vy,[2,134]),{86:[1,192],88:[1,193]},o($VI,[2,138],{47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,89:194,19:195,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl}),o($Vz,[2,115]),o($Vz,[2,153]),o($Vz,[2,155]),o($Vz,[2,157]),o($Vz,[2,107]),{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:139,60:196,61:138,62:140,67:$VC,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:134,63:197,64:133,65:135,69:$VB,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},o($VJ,[2,89]),o($Vz,[2,103]),o($VK,[2,100]),{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:176,69:$VM,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},o($Vz,[2,104]),o($VK,[2,96]),{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:176,67:$VN,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},o($VF,[2,151],{10:184,91:$Vf,94:$Vg,96:$Vh,98:$Vi}),o($VL,[2,143]),o($Vy,[2,121]),o($VH,[2,128],{19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,83:188,44:189,43:190,40:191,82:200,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,74:$Vw,76:$Vc,77:$Vd,84:$Ve,102:$Vj,104:$Vk,106:$Vl}),o($VH,[2,125],{19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,44:189,43:190,40:191,83:201,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,74:$Vw,76:$Vc,77:$Vd,84:$Ve,102:$Vj,104:$Vk,106:$Vl}),o($VO,[2,129]),o($VO,[2,131]),o($VO,[2,132]),o($VO,[2,133]),o($Vy,[2,135]),o($VI,[2,140],{47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,19:195,89:202,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl}),o($VI,[2,137]),o($VI,[2,141],{48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,47:112,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,102:$Vj,104:$Vk,106:$Vl}),{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:139,61:181,62:140,67:[1,203],69:[1,204],72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:134,64:178,65:135,67:[1,206],69:[1,205],72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},o($VK,[2,106]),o($VK,[2,105]),o($VH,[2,127],{19:36,45:37,46:38,47:39,48:42,49:43,50:44,51:45,52:46,70:47,66:48,68:49,53:50,54:58,44:189,43:190,40:191,83:201,55:$V5,56:$V6,57:$V7,67:$V8,69:$V9,71:$Va,72:$Vb,74:$Vw,76:$Vc,77:$Vd,84:$Ve,102:$Vj,104:$Vk,106:$Vl}),o($VO,[2,130]),o($VI,[2,139]),{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,58:207,59:126,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},o($Vz,[2,110]),{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,58:208,59:126,72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},o($Vz,[2,111]),{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:176,67:$VN,71:[1,209],72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},{45:130,46:129,49:127,50:128,51:131,53:50,54:58,55:$V5,56:$V6,57:$V7,59:176,69:$VM,71:[1,210],72:$Vb,77:$Vd,84:$Ve,102:$Vj,104:$Vk},o($Vz,[2,108]),o($Vz,[2,109])],
defaultActions: {3:[2,2],5:[2,158],62:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    /*
     * This chunk is included in the parser code, before the lexer definition section and after the parser has been defined.
     *
     * WARNING:
     *
     * Meanwhile, keep in mind that all the parser actions, which will execute inside the `parser.performAction()` function,
     * will have a `this` pointing to `$$`.
     *
     * If you want to access the lexer and/or parser, these are accessible inside the parser rule action code via
     * the `yy.lexer` and `yy.parser` dereferences respectively.
     */

    // console.log("This chunk is included in the parser code");


var Entities = require('html-entities').AllHtmlEntities;
var html_entities = new Entities();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    function CreateListStack () {
        var stack = [''];
        return {
            push: function(v) { stack.push(v); },
            pop: function() { return stack.pop(); },
            peek: function() { return stack[stack.length-1]; }
        };
    }

    var tokensListStart = {
        '*' : 'UL',
        '#' : 'OL',
        ';' : 'DL',
        ':' : 'INDENT'
    };
    var tokensListEnd = {
        '*' : 'UL_E',
        '#' : 'OL_E',
        ';' : 'DL_E',
        ':' : 'INDENT_E'
    };

    function processList(lex, sig) {
        if (! lex.listStack ) {
            lex.listStack = CreateListStack();
        }
        var startSig = lex.listStack.peek();

        function innerProcessList(lex, sig) {
            var listStack = lex.listStack;
            var tokens = [];
            if (listStack.peek() === sig) {
                // Matches, so we have a list item or empty
                if (sig.length) {
                    return ['LI'];
                } else {
                    return [];
                }
            }

            // Start a nested list?
            var currentSig = listStack.peek();
            if (sig.substr(0, currentSig.length) === currentSig) {
                tokens.push(tokensListStart[sig[currentSig.length]]);
                listStack.push(sig.substr(0, currentSig.length+1));
                lex.begin('list');
                return tokens.concat(innerProcessList(lex, sig));
            }
            // End of list, stop one at a time.
            tokens.push(tokensListEnd[currentSig[currentSig.length-1]]);
            listStack.pop();
            lex.popState();
            return tokens.concat(innerProcessList(lex, sig));
        }
        return innerProcessList(lex, sig);
    }


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 20
break;
case 1:
                                        if (yy_.yylloc.first_column) {
                                            return 57               /* '=' anywhere but at the begging becomes just text */
                                        } else {
                                            return 'H'+yy_.yytext.trim().length+'_BEG';
                                        }
                                    
break;
case 2: this.begin('template'); return 77; 
break;
case 3: this.popState(); return 79; 
break;
case 4:return 81
break;
case 5: this.begin('link'); return 84; 
break;
case 6: this.popState(); return 86; 
break;
case 7:return 88
break;
case 8:  /* <nowiki> */
                                        this.begin('nowiki'); return 72;
                                    
break;
case 9: /* </nowiki> */
                                        this.popState(); return 73;
                                    
break;
case 10:return 57
break;
case 11:  /* List Item */
                                        if (!yy_.yylloc.first_column) {
                                            return processList(this, yy_.yytext);
                                        } else {
                                            return 57; /* treat list characters in the middle of a line as text. */
                                        }
                                    
break;
case 12:  /* End of List */
                                        return ['NEWLINE'].concat(processList(this, ''));
                                    
break;
case 13:  /* End of List */
                                        return processList(this, '').concat(['EOF']);
                                    
break;
case 14:  /* Start List Mode */
                                        if (!yy_.yylloc.first_column) {
                                            return processList(this, yy_.yytext);
                                        } else {
                                            return 57; /* treat list characters in the middle of a line as text. */
                                        }
                                    
break;
case 15: this.begin('comment'); return 106; 
break;
case 16: this.popState(); return 107; 
break;
case 17:return 57;
break;
case 18:return 57;
break;
case 19:return 71;
break;
case 20:return 57;
break;
case 21:return 69;
break;
case 22:return 67;
break;
case 23:return 57;
break;
case 24:return 55;
break;
case 25:return 102;
break;
case 26:return 103;
break;
case 27:return 104;
break;
case 28:return 105;
break;
case 29:return 108;
break;
case 30:
                                        if (yy_.yylloc.first_column)
                                            return 74;
                                        else
                                            return 76;
                                    
break;
case 31:return 56;
break;
case 32:return 57;
break;
case 33:return 57;
break;
}
},
rules: [/^(?:([ \t])*[=]+([ \t])*(\n|$))/,/^(?:([ \t])*[=]{1,5}([ \t])*)/,/^(?:[{][{])/,/^(?:[}][}])/,/^(?:[|])/,/^(?:[[][[])/,/^(?:[\]][\]])/,/^(?:[|])/,/^(?:[<]\s*nowiki\s*[>])/,/^(?:[<]\s*[\/]nowiki\s*[>])/,/^(?:.)/,/^(?:([:#*;])+)/,/^(?:[\n](?=([^:#*;])+))/,/^(?:$)/,/^(?:([:#*;])+)/,/^(?:<!--)/,/^(?:-->)/,/^(?:.)/,/^(?:[']+(?=('''''))($|[^']))/,/^(?:('''''))/,/^(?:['](?=(''')))/,/^(?:('''))/,/^(?:(''))/,/^(?:['])/,/^(?:\\u[0-9a-fA-F]{4})/,/^(?:<sup>)/,/^(?:<\/sup>)/,/^(?:<sub>)/,/^(?:<\/sub>)/,/^(?:$)/,/^(?:(\r|\n|\n\r|\r\n))/,/^(?:[&]\w+[;])/,/^(?:([^|[\]*#:;<>='{}\n])+)/,/^(?:.)/],
conditions: {"nowiki":{"rules":[9,10],"inclusive":false},"comment":{"rules":[16,17],"inclusive":false},"template":{"rules":[0,1,2,3,4,5,8,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"inclusive":true},"link":{"rules":[0,1,2,5,6,7,8,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"inclusive":true},"list":{"rules":[0,1,2,5,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"inclusive":true},"INITIAL":{"rules":[0,1,2,5,8,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"inclusive":true}}
});
/* Begin Lexer Customization Methods */
    (function (){
        var _originalLexMethod = lexer.lex;
        var _tokenCache = [];
        var _debug = false;
        var tokenMap = [];

        function log() {
            if (_debug) {
                console.log.apply(console, arguments);
            }
        }

        function getTokenText(token) {
            if (Number.isInteger(token)) {
                return tokenMap[token] || ('Token Not Found: ' + token);
            }
            return token;
        }

        lexer.lex = function() {
            var token = _tokenCache.shift();
            if (token) {
                log(getTokenText(token));
                return token;
            }
            token = _originalLexMethod.call(this);
            if (Array.isArray(token)) {
                _tokenCache = token;
                return this.lex();
            }
            log(getTokenText(token));
            return token;
        };

        function setupTokenMap() {
            var symbols = parser.symbols_;
            for (token in symbols) {
                if (symbols.hasOwnProperty(token)) {
                    tokenMap[symbols[token]] = token;
                }
            }
        }

        setupTokenMap();
    }());
    /* End Lexer Customization Methods */;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = wiktionary;
exports.Parser = wiktionary.Parser;
exports.parse = function () { return wiktionary.parse.apply(wiktionary, arguments); };
exports.main = function (){};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}